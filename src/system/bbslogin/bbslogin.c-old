/*****************************************************************************\
 **                                                                         **
 **  FILE:     bbslogin.c                                                   **
 **  AUTHORS:  Alexios                                                      **
 **  REVISION: C, March 95, Version 0.3                                     **
 **            D, July 95, Version 0.4                                      **
 **            E, July 95, Version 0.5                                      **
 **  PURPOSE:  Begin a BBS session                                          **
 **  NOTES:                                                                 **
 **  LEGALESE:                                                              **
 **                                                                         **
 **  This program is free software; you  can redistribute it and/or modify  **
 **  it under the terms of the GNU  General Public License as published by  **
 **  the Free Software Foundation; either version 2 of the License, or (at  **
 **  your option) any later version.                                        **
 **                                                                         **
 **  This program is distributed  in the hope  that it will be useful, but  **
 **  WITHOUT    ANY WARRANTY;   without  even  the    implied warranty  of  **
 **  MERCHANTABILITY or  FITNESS FOR  A PARTICULAR  PURPOSE.   See the GNU  **
 **  General Public License for more details.                               **
 **                                                                         **
 **  You  should have received a copy   of the GNU  General Public License  **
 **  along with    this program;  if   not, write  to  the   Free Software  **
 **  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.              **
 **                                                                         **
\*****************************************************************************/


/*
 * $Id: bbslogin.c-old,v 2.0 2004/09/13 19:44:53 alexios Exp $
 *
 * $Log: bbslogin.c-old,v $
 * Revision 2.0  2004/09/13 19:44:53  alexios
 * Stepped version to recover CVS repository after near-catastrophic disk
 * crash.
 *
 * Revision 1.3  2001/04/22 14:49:07  alexios
 * Merged in leftover 0.99.2 changes and additional bug fixes.
 *
 * Revision 1.6  1998/08/11 10:24:16  alexios
 * Fixed injoth bug. Removed umask().
 *
 * Revision 1.5  1998/07/24 10:25:30  alexios
 * Migrated to bbslib 0.6.
 *
 * Revision 1.4  1998/03/10 10:11:26  alexios
 * Reinstating the STABLE status. What a silly mistake.
 *
 * Revision 1.3  1998/03/10 10:09:34  alexios
 * Corrected a couple of small problems. Paranoia programming,
 * mostly.
 *
 * Revision 1.2  1997/11/06 20:15:17  alexios
 * Added GPL legalese to the top of this file.
 *
 * Revision 1.1  1997/11/06 17:03:13  alexios
 * Fixed a few minor leftover bugs and switched to the new
 * auditing scheme.
 *
 * Revision 1.0  1997/11/03 00:55:23  alexios
 * Bbslogin is now Stable and has advanced to version 1.0.
 * Removed code to handle hardwired translation tables. Re-
 * placed it with code to ask for and use generalised
 * customisable translation tables. Bbslogin 1.0 handles the
 * ANSIASK and TRASK flags to ask the user for their ANSI
 * and translation preferences (unless already asked by the
 * system). Minor beautification and bugfixes. Replaced all
 * instances of xlwrite() with write(), since translation is
 * now handled by emud.
 *
 * Revision 0.5  1997/09/14 13:52:03  alexios
 * Removed calls to system() that slowed bbslogin down.
 * Replaced them with standard system calls like chown().
 *
 * Revision 0.4  1997/09/12 13:29:31  alexios
 * Added code to create the user's IPC injoth() queue. Fixed the
 * broken invisible-login feature. Added auditing for duplicate
 * user login attempts.
 *
 * Revision 0.3  1997/08/30 13:08:49  alexios
 * Removed a soup (sic).
 *
 * Revision 0.1  1997/08/28 11:13:27  alexios
 * First registered revision. Adequate.
 *
 *
 */


#ifndef RCS_VER 
#define RCS_VER "$Id: bbslogin.c-old,v 2.0 2004/09/13 19:44:53 alexios Exp $"
#endif



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <unistd.h>
#include <time.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <pwd.h>
#include <grp.h>
#include <utmp.h>
#include <termios.h>
#include "bbs.h"
#include "mbk_signup.h"
#include "mbk_login.h"
#include "bbslogin.h"


char *LineStates[]={"NORMAL","BUSY-OUT","NO-ANSWER","OFF-LINE"};
#define NUMSTATES 4

#define NORMAL   0
#define BUSYOUT  1
#define NOANSWER 2
#define OFFLINE  3

#define STDIN  0
#define STDOUT 1
#define STDERR 2

#define LOCALLINE    ((lastchandef->flags&(TTF_SERIAL|TTF_CONSOLE))!=0)
#define ALLOWSIGNUPS ((lastchandef->flags&TTF_SIGNUPS)!=0)
#define KEY          (lastchandef->key)


char         tty[32], majst[32], minst[32], userid[64];
int          linestate, baud, ansiopt=0;
useracc      uacc;
onlinerec    user;
promptblk    *msg=NULL;
int          lonalrm;
char         *terminal;
extern char  **environ;
int          xlation=0, lang=1;
int          setlang=0,setansi=0,setxlt=0;
int          uid=-1,gid=-1;
int          bbsuid=-1,bbsgid=-1;


void
mkinjoth()
{
  struct msqid_ds buf;

  user.injothqueue=msgget(IPC_PRIVATE,0620);
  if(user.injothqueue<0){
    int i=errno;
    fatal("Unable to allocate IPC message queue (errno=%d, %s)",
	  i,sys_errlist[i]);
  }

  if(msgctl(user.injothqueue,IPC_STAT,&buf)){
    int i=errno;
    fatal("Unable to IPC_STAT injoth queue (errno=%d, %s)",
	  i,sys_errlist[i]);
  }

  buf.msg_perm.uid=uid;
  buf.msg_perm.gid=gid;
  
  if(msgctl(user.injothqueue,IPC_SET,&buf)){
    int i=errno;
    fatal("Unable to IPC_SET injoth queue (errno=%d, %s)",
	  i,sys_errlist[i]);
  }
}


void
writeonline(char status)
{
  FILE *fp;
  char fname[256], ttyname[256];

  sprintf(fname,"%s/%s",ONLINEDIR,userid);
  if((fp=fopen(fname,"w"))==NULL){
    fatal("Unable to create on-line info for %s.",userid);
  }
  memset(&user,0,sizeof(user));
  user.injothqueue=-1;
  strcpy(user.userid,userid);
  user.baudrate=atoi(getenv("BAUD"));
  user.statcreds=0;
  user.statptrs=STF_FIRST;
  strcpy(user.channel,tty);
  strcpy(user.emupty,getenv("EMUPTY"));
  strcpy(user.curpage,"");
  user.flags=0;
  user.tick=0;
  user.loggedin=time(0);
  strcpy(user.input,"");
  if(hassysaxs(&uacc,USY_INVIS) && status=='!'){
    unsetenv("INVIS");
    user.flags|=OLF_INVISIBLE;
  }

  /* Force idle timeouts if the user is connecting through telnet */
  
  if((channels[getchannelindex(user.channel)].flags)&TTF_TELNET)
    user.flags|=OLF_FORCEIDLE;

  user.lastpage=-100;

  if((uacc.prefs&UPF_TRDEF)==0){
    setoxlation(user,getpxlation(uacc));
    setxlationtable(getpxlation(uacc));
  }

  user.flags&=~OLF_ANSION;
  if(uacc.prefs&(UPF_ANSIDEF|UPF_ANSIASK) && ansienable)user.flags|=OLF_ANSION;
  else if((uacc.prefs&UPF_ANSIDEF)==0 && uacc.prefs&UPF_ANSION)
    user.flags|=OLF_ANSION;

  mkinjoth();

  if(!fwrite(&user,sizeof(user),1,fp)){
    fatal("Unable to write on-line info for %s.",userid);
  }
  fclose(fp);
  
  sprintf(ttyname,"%s/.%s",ONLINEDIR,tty);
  if((fp=fopen(ttyname,"w"))!=NULL){
    fprintf(fp,"%s\n",fname);
  }
  fclose(fp);
  sprintf(fname,"%s/.shmid-%s",ONLINEDIR,userid);
  chown(fname,uid,gid);
  sprintf(fname,"%s/.%s",ONLINEDIR,tty);
  chown(fname,uid,gid);
  sprintf(fname,"%s/%s",ONLINEDIR,userid);
  chown(fname,uid,gid);
}


void writelinestatus(char *result, char *userid)
{
  char fname[256];
  FILE *fp;

  errno=0;
  sprintf(fname,"%s/.status-%s",CHANDEFDIR,tty);
  
  if((fp=fopen(fname,"w"))==NULL){
    fatal("Cannot open status file %s for writing.",fname,NULL);
  }

  fprintf(fp,"%s %s %d",majst,result,atoi(getenv("BAUD")));
  if(userid[0])fprintf(fp," %s\n",userid);
  else fprintf(fp," [NO-USER]\n");
  fclose(fp);
}


void
updateutmp(char *username)
{
  struct utmp ut;
  int wtmp;
  
  memset((char *)&ut,0,sizeof(ut));
  ut.ut_type=USER_PROCESS;
  ut.ut_pid=getpid();
  strncpy(ut.ut_line,tty,sizeof(ut.ut_line));
  memcpy(ut.ut_id,&tty[3],2);
  (void)time(&ut.ut_time);
  strncpy(ut.ut_user,username,sizeof(ut.ut_user));
  
  utmpname(_PATH_UTMP);
  setutent();
  pututline(&ut);
  endutent();
  
  if((wtmp=open(_PATH_WTMP,O_APPEND|O_WRONLY))>=0){
    write(wtmp,(char *)&ut,sizeof(ut));
    close(wtmp);
  }
}


void
notifybbsd()
{
  FILE *fp;
  
  if((fp=fopen(BBSDPIPEFILE,"w"))==NULL)return;
  fprintf(fp,"connect %s %s\n",tty,user.userid);
  fclose(fp);
}


void
waitshmid(char *user)
{
  int i;
  char fname[256],userf[256];
  struct stat buf;

  sprintf(fname,"%s/.shmid-%s",ONLINEDIR,user);
  for(i=0;i<20;i++){
    usleep(100000);
    if(!stat(fname,&buf))return;
  }
  sprintf(userf,"%s/%s",ONLINEDIR,user);
  unlink(userf);
  fatal("Timed out waiting for bbsd file %s",fname);
}


void storepid()
{
  FILE *fp;
  char fname[256];
  
  sprintf(fname,"%s/.pid-%s",CHANDEFDIR,tty);
  
  if((fp=fopen(fname,"w"))==NULL){
    fatal("Cannot open PID file %s for writing",fname);
  }

  fprintf(fp,"%d\n",getpid());
  fclose(fp);
}


void
resetchannel()
{
  char fname[256], majst[32], minst[32], user[32];
  int baud;
  FILE *fp;

  errno=0;
  sprintf(fname,"%s/.status-%s",CHANDEFDIR,tty);
  
  getlinestatus(tty,majst,minst,&baud,user);
  
  if((fp=fopen(fname,"w"))==NULL){
    fatal("Cannot open status file %s for writing.",fname,NULL);
  }

  fprintf(fp,"%s OK 0 [NO-USER]\n",majst);
  fclose(fp);
}


void
init()
{
  struct passwd *bbspass=getpwnam(BBSUSERNAME);
  char baudrate[64], fname[256];
  FILE *fp;

  
  if(getuid()){
    fatal("bbslogin must be run by the super user.");
  }

  if(bbspass==NULL){
    fatal("Unable to locate /etc/passwd entry for user %s",
	  BBSUSERNAME);
  }
  
  bbsuid=bbspass->pw_uid;
  bbsgid=bbspass->pw_gid;

  strcpy(tty,getenv("CHANNEL"));
  strcpy(baudrate,getenv("BAUD"));
/*  environ=(char**)alcmem(sizeof(char*));
  memset(environ,0,sizeof(char*)); */
  setenv("CHANNEL",tty,1);
  setenv("BAUD",baudrate,1);

  initmodule(INITTTYNUM|INITOUTPUT|INITSYSVARS|INITERRMSGS|INITINPUT|
	     INITSIGNALS|INITCLASSES|INITLANGS|INITATEXIT);
  setwaittoclear(0);

  atexit(resetchannel);

  if(getchannelnum(tty)<0){
    fatal("%s has not been registered in %s",
	  tty,CHANDEFFILE);
  }

  msg=opnmsg("login");
  setlanguage(lastchandef->lang>0?lastchandef->lang:-lastchandef->lang);
  lonalrm=numopt(LONALRM,0,32767)*60;
  terminal=stgopt(TERMINAL);

  sprintf(fname,"%s/.%s",ONLINEDIR,tty);
  if((fp=fopen(fname,"r"))!=NULL){
    char onlrec[256];
    if(fscanf(fp,"%s",onlrec)==1)unlink(onlrec);
  }
  fclose(fp);
  unlink(fname);

}


void
idler()
{
  char fname[256];
  fclose(stdout);
  fclose(stdin);
  sprintf(fname,"%s/.pid-%s",CHANDEFDIR,tty);
  execl(IDLERBIN,"idler",">",fname,"2>",fname,NULL);
}


void
showttyinfo()
{
  char fname[256];
  sprintf(fname,TTYINFOFILE,tty);
  printfile(fname);
}


void
timeout()
{
  prompt(TIMEOUT);
  sleep(1);
  hangup();
  exit(0);
}


void
getinp(char *i,int passwordentry)
{
  int  cp=0;
  unsigned char c;
  static char del[4]="\010 \010\0";

  for(;;){
    read(0,&c,1);

    switch(c){
    case 13:
    case 10:
      c='\n';
      write(0,&c,1);
      fflush(stdout);
      input[cp]=0;
      monitorinput(tty);
      strcpy(i,input);
      return;
    case 127:
    case 8:
      if(cp){
	write(0,del,3);
	cp--;
      }
      break;
    case 4:
      sleep(5);
      exit(0);
      break;
    default:
      if(strlen(input)<63 && c>=0x20){
	input[cp++]=c;
	if(passwordentry)c='*';
	write(0,&c,1);
      }
    }
  }
}


void
kickout()
{
  prompt(STRUKO,NULL);
  hangup();
  sleep(5);
  exit(0);
}


void
setterm()
{
  FILE *fp;

  setenv("TERM",terminal,1);

  if((fp=fopen(ETCTTYFILE,"r"))==NULL){
    fatal("Can't open %s\n",ETCTTYFILE);
  }
  while(!feof(fp)){
    char line[1024], *cp=line, TTY[64], TERM[64];
    
    if(!fgets(line,sizeof(line),fp))continue;
    while(*cp && isspace(*(cp++)));
    if(*cp=='#')continue;
    if(sscanf(line," %s %s ",TERM,TTY)==2){
      if(!strcmp(tty,TTY)){
	setenv("TERM",TERM,1);
	break;
      }
    }
  }
  fclose(fp);
}


void
unixlogin()
{
  char command[256];

  setterm();
  sprintf(command,"%s sane",STTYBIN);
  system(command);
  writelinestatus("USER","[UNIX]");
  execl(LOGINBIN,"login",userid,NULL);
  execl("/bin/sh","sh","-c","login",userid,NULL);
  fatal("Unable to execute %s",LOGINBIN);
  exit(1);
}


void
askxlation()
{
  struct stat st;
  char fname[256];
  int  xltmap[10];
  int  i;
  char input[80];
  int  def=-1;

  if(setxlt)return;		/* Don't ask twice. */

  /* Check the available translation tables and make the first one the
     default */

  for(i=0;i<NUMXLATIONS;i++){
    sprintf(fname,XLATIONDIR"/"XLATIONSRC,i);
    xltmap[i]=(stat(fname,&st)==0);
    if(xltmap[i]&&def<0)def=i;
  }

  /* Check if this channel has a default translation table. */

  setxlt=1;
  if(lastchandef->xlation)def=lastchandef->xlation;

  for(;;){
    prompt(XLATEM,def);
    getinp(input,0);
    if(strlen(input)==1&&isdigit(*input))xlation=atoi(input);
    else if(!strlen(input))xlation=def;
    if(!xltmap[xlation])prompt(XLATEE);
    else break;
  }
}


void
askansi()
{
  int answer;

  if(setansi)return;		/* Don't ask twice */
  setansi=1;
  while(!getbool(&answer,0,QANSIERR,QANSI,lastchandef->flags&TTF_ANSI));
  setansiflag(answer);
}


void
asklanguage()
{
  int  i=0,choice=0,ok=0,showmenu=1;
  char input[80];
  
  setlang=1;
  if(numlangs){
    while(!ok){
      if(showmenu){
	showmenu=0;
	prompt(ASKLNG1);
	for(i=0;i<numlangs;i++)prompt(ASKLNG2,i+1,languages[i]);
      }
      prompt(ASKLNG3,numlangs,lastchandef->lang);
      getinp(input,0);
      if(sameas(input,"?")){
	showmenu=1;
	continue;
      } else if(!input[0]){
	ok=1;
	choice=lastchandef->lang;
      } else {
	choice=atoi(input);
	if(choice<1 || choice>numlangs){
	  prompt(ASKLNGR,numlangs);
	  continue;
	} else ok=1;
      }
    }
  } else choice=1;
  lang=choice;
  setlanguage(choice);
}


char *
lowerc(char *s)
{
  static char tmp[1024];
  int i;
  
  for(i=0;i<1024;i++){
    tmp[i]=tolower(s[i]);
    if(!s[i])return tmp;
  }
  return tmp;
}


void
authenticate()
{
  char  dummy[64], status=0, filename[256];
  FILE  *fp;
  int   givenprompt=0, strikes=0, signup=0;
  int   defaultansi=(lastchandef->flags&TTF_ANSI)!=0;

  if(!getlinestatus(tty,majst,minst,&baud,dummy)){
    fatal("Unable to get line status for %s\n",tty);
  }

  if(sameas(majst,"BUSY-OUT")||sameas(majst,"NO-ANSWER")){
    prompt(LDOWN);
    sleep(1);
    hangup();
    return;
  }
  
  setansiflag(lastchandef->flags&TTF_ANSI);
  if(lastchandef->flags&TTF_ASKANSI)ansiopt=3;
  else if (lastchandef->flags&TTF_ANSI)ansiopt=2;
  else ansiopt=1;

  setenv("CHANNEL",tty,1);
  setxlationtable(xlation=lastchandef->xlation);

  if(!sameas(majst,"OFF-LINE")){
    if(!LOCALLINE)writelinestatus("LOGIN","");
    
    if(lastchandef->flags&TTF_TELNET && (telnetlinecount()>sysvar->tnlmax)){
      prompt(TFULL);
      sleep(1);
      hangup();
      return;
    }
    
    setansiflag(0);
    if(lastchandef->flags&TTF_ASKXLT)askxlation();
    else xlation=lastchandef->xlation;
    setxlationtable(xlation);
    setansiflag(1);
    
    if(!ansiopt)ansiopt=2;
    if(--ansiopt<2)setansiflag(ansiopt);
    else{
      char c,answer=defaultansi?'Y':'N';
      int len=0,ok=0;
      
      setansi=1;
      prompt(QANSI);
      while(!ok){
	read(STDIN,&c,1);
	c=toupper(c);
	switch(c){
	case 'Y':
	case 'N':
	  if(!len){
	    len++;
	    answer=c;
	    write(STDOUT,&c,1);
	  }
	  break;
	case 8:
	case 127:
	  if(len){
	    fprintf(stdout,"\b \b");
	    fflush(stdout);
	    len--;
	  }
	  break;
	case 10:
	case 13:
	  ok=1;
	  break;
	}
	ioctl(0,TCFLSH,0);
      }
      writelinestatus("LOGIN","");
      setansiflag(ansiopt=(answer=='Y'));

      if(lastchandef->lang<0){
	lastchandef->lang=-lastchandef->lang;
	asklanguage();
      }
    }
    
    noerrormessages();
    loadsysvars();
  } else {
    printfile(LOGINMSGFILE);
    showttyinfo();
    prompt(BBSOFF,NULL);
    hangup();
    if(!LOCALLINE){
      sleep(10);
      exit(0);
    } else {
      alarm(0);
      idler();
    }
  }

  for(;;) {
    if((!strikes && LOCALLINE) || !givenprompt){
      givenprompt=1;
      prompt(lastchandef->flags&TTF_TELNET?THELLO:HELLO);
      printfile(LOGINMSGFILE);
      showttyinfo();
    }
    
    prompt(ALLOWSIGNUPS?ENTUSID:LOGUID,NULL);
    (void) ioctl(STDIN, TCFLSH, 0);

    if(lonalrm > 0 && !LOCALLINE) {
      signal(SIGALRM,timeout);
      alarm(lonalrm);
    }
    
    userid[0]=0;
    getinp(userid,0);
    alarm(0);

    if(!userid[0]){
      if(!LOCALLINE||strikes)if(++strikes>=3)kickout();
      continue;
    }

    baud=atoi(getenv("BAUD"));
    
    if(sameas(userid,SIGNUPID)){
      if(!ALLOWSIGNUPS){
	strikes++;
	if(strikes<LOGINSTRIKES){
	  prompt(LOGNOG,NULL);
	  continue;
	}else{
	  audit(tty,AUDIT(UNKUSER),userid,
		baudstg(atoi(getenv("BAUD"))));
	  kickout();
	}
      } else {
	char parm[32],command[256];

	writelinestatus("USER","[SIGNUP]");
	strcpy(userid,"[SIGNUP]");
	setenv("USERID",userid,1);
	setenv("CHANNEL",tty,1);
	setenv("TERM",BBSTERM,1);
	updateutmp(userid);

	strcpy(parm,"-");
	if(setlang)strcat(parm,"l");
	if(setansi)strcat(parm,"a");
	if(setxlt)strcat(parm,"x");
	sprintf(command,"%s %s",SIGNUPBIN,parm);
	system(command);
	{
	  FILE *fp;
	  char fname[256];

	  sprintf(fname,"/tmp/signup-%s",tty);
	  if((fp=fopen(fname,"r"))==NULL)exit(0);
	  fscanf(fp,"%s",userid);
	  signup=1;
	  fclose(fp);
	  unlink(fname);
	}
      }
    }
    
    if(userid[0]=='!' || userid[0]=='@'){
      status=userid[0];
      strcpy(userid,&userid[1]);
    }

    if(!userexists(userid) || status=='@'){
      if((fp=fopen("/etc/passwd","r"))==NULL){
	fatal("Unable to open /etc/passwd!",NULL);
      }
      while (!feof(fp)){
	char line[1024], *cp;
	
	if(!fgets(line,1024,fp))continue;
	if((cp=strchr(line,':'))==NULL)continue;
	*cp=0;
	if(!strcmp(lowerc(line),userid)){
	  fclose(fp);
	  unixlogin();
	}
      }
      fclose(fp);
      strikes++;
      if(strikes<LOGINSTRIKES){
	prompt(ALLOWSIGNUPS?UIDNOG:LOGNOG,NULL);
	continue;
      }else{
	audit(tty,AUDIT(UNKUSER),userid,baudstg(baud));
	kickout();
      }
    }

    sprintf(filename,"%s/%s",USRDIR,userid);
    if((fp=fopen(filename,"r"))==NULL){
      fatal("Failed to open user account %s.",filename,NULL);
    }
    if(fread(&uacc,sizeof(useracc),1,fp)!=1){
      fatal("Failed to read user account %s.",filename,NULL);
    }
    fclose(fp);

    if(uacc.flags&(UFL_SUSPENDED|UFL_DELETED)){
      prompt(uacc.flags&UFL_DELETED?ACCDEL:ACCSUS,NULL);
      hangup();
      exit(0);
    } else {
      classrec *ourclass=findclass(uacc.curclss);

      if(ourclass==NULL){
	fatal("Can't find class %s for user %s!",
	      uacc.curclss,uacc.userid);
      }

      setlanguage(uacc.language);
      if(uinsys(userid,0)
	 &&((ourclass->flags&CF_LINUX)==0||status!='@')){
	prompt(ALRDON,NULL);
	audit(tty,AUDIT(DUPUSER),userid,baudstg(baud));
	hangup();
	exit(0);
      } else if (ourclass->flags&CF_LINUX && status=='@'){
	char *cp=userid-1;
	strcpy(cp,userid);
	unixlogin();
      }
      if(ourclass->flags&CF_LOCKOUT){
	prompt(LOKOUT,NULL);
	hangup();
	exit(0);
      } else if(KEY) {
	if(!haskey(&uacc,KEY)){
	  prompt(NOKEY,NULL);
	  kickout();
	}
      }
    }

    writelinestatus("LOGIN","");

    for(;;){
      struct passwd  *pass=getpwnam(lowerc(userid));
      char           password[64];

      if(!signup){
	prompt(ENTPSW);
	setpasswordentry(1);
	
	if(lonalrm > 0 && !LOCALLINE) {
	  signal(SIGALRM,timeout);
	  alarm(lonalrm);
	}
    
	getinp(password,1);
      } else strcpy(password,uacc.passwd);
      alarm(0);
      
      if(sameas(password,uacc.passwd)){
	char tmp[256];
	
	setenv("USERID",userid,1);
	setenv("CHANNEL",tty,1);
	
	uid=pass->pw_uid;
	gid=pass->pw_gid;
	writeonline(status);

	if(sysvar->lonaud)
	  audit(tty,AUDIT(LOGIN),user.userid,baudstg(user.baudrate));

	notifybbsd();

	waitshmid(userid);
	donemodule();
	initmodule(INITALL);
	memcpy(&thisuseracc,&uacc,sizeof(useracc));
	memcpy(&thisuseronl,&user,sizeof(onlinerec));
	writelinestatus("USER",userid);
	setlanguage(uacc.language);
	setscreenheight(thisuseracc.scnheight);
	setlinelen(thisuseracc.scnwidth);
	setwaittoclear(0);
	afterinput=1;
	resetvpos(0);

	setansiflag(ansiopt);
	setmbk(msg);
	if(uacc.prefs&UPF_TRASK)askxlation();
	else if(uacc.prefs&UPF_TRDEF)setxlationtable(xlation);

	if(uacc.prefs&UPF_ANSIASK)askansi();
	setansiflag(ansiopt);
	if(ansiopt)user.flags|=OLF_ANSION;
	else user.flags&=~OLF_ANSION;

	if(sysvar)sysvar->connections++;

	if((!getuid())||(!getgid())){
	  char fname[256];
	  sprintf(fname,"%s/.shmid-%s",ONLINEDIR,userid);
	  chown(fname,bbsuid,bbsgid);
	}

	/*	if(hassysaxs(&uacc,USY_INVIS) && status=='!'){
	  user.flags|=OLF_INVISIBLE;
	  setenv("INVIS","on",1);
	}*/

	sprintf(tmp,"reset; %s rows %d columns %d ixon ixoff",STTYBIN,
		uacc.scnheight,uacc.scnwidth);
	system(tmp);
	sprintf(tmp,"%d",uacc.scnwidth);
/*	setenv("BBSCOLUMNS",tmp,1); */
	sprintf(tmp,"%d",uacc.scnheight);
/*	setenv("BBSROWS",tmp,1); */
	setenv("HOME",pass->pw_dir,0);
/*	if(pass->pw_uid) setenv("PATH", _PATH_DEFPATH":"BINDIR,1);
	else setenv("PATH", _PATH_DEFPATH_ROOT":"BINDIR, 1); */
	setenv("SHELL",pass->pw_shell,1);
	sprintf(tmp,"%s/%s",_PATH_MAILDIR,userid);
	setenv("MAIL",tmp,0);
	
	sprintf(tmp,"/dev/%s",tty);
	chmod(tmp,0660);
	chown(tmp, pass->pw_uid,pass->pw_gid);
	setgid(pass->pw_gid);
	initgroups(lowerc(userid),pass->pw_gid);
	umask(0007);
	
	updateutmp(userid);
	setgid(pass->pw_gid);
	setuid(pass->pw_uid);
	setlanguage(uacc.language);

	setmbk(msg);
	if(signup)sendmail();
	setmbk(msg);

	resetvpos(0);
	if(uacc.connections)prompt(GREETINGS,userid);
	else prompt(NEWGREET,userid);
	prompt(GPL);
	donemodule();

	clsmsg(msg);

	thisuseracc.connections++;

	setterm();

	fflush(stdout);

	execl("/bin/sh","sh","-c",LOGINSCRIPT,NULL);
	fatal("Cannot execute %s",LOGINSCRIPT);
      } else {
	prompt(PSWNOG,NULL);
	strikes++;
	if(strikes>=3){
	  audit(tty,AUDIT(HACKTRY),userid,baudstg(baud));
	  kickout();
	}
      }
    }
  }
}


void
main(int argc, char *argv[])
{
  setprogname(argv[0]);
  if(getuid()){
    fprintf(stderr,"%s: not superuser.\n",argv[0]);
    exit(1);
  }
  init();
  authenticate();
}
