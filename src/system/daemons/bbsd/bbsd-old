

/* Event warning times. The line below means 'warn every 60 mins */
/* until less than 60 mins are left, then every 30 mins, etc.    */

int warntimes [] = {60,30,15,10,5,4,3,2,1,-1};


DIR           *onlinedir;
struct dirent *usronlrec;
promptblk     *msg;
unsigned char proj=0;
time_t        classtime=0;
time_t        sysvartime=0;


void
storepid()
{
  FILE *fp;
  char fname[256];
  
  sprintf(fname,"%s/bbsd.pid",BBSETCDIR);
  if((fp=fopen(fname,"w"))==NULL)return;
  fprintf(fp,"%d",getpid());
  fclose(fp);
}


int
shmthere(char *userid)
{
  char fname[256];
  struct stat buf;

  sprintf(fname,"%s/.shmid-%s",ONLINEDIR,userid);
  return (stat(fname,&buf)==0);
}


void
makeshm(char *userid)
{
  char fname[256];
  FILE *fp;
  int shmid=0;
  struct stat st;

  proj=(proj+1)%0xff;
  sprintf(fname,"%s/%s",ONLINEDIR,userid);
  stat(fname,&st);
  if((shmid=shmget(ftok(fname,proj),4096,IPC_CREAT|IPC_EXCL|0x1ff))==-1)return;
  sprintf(fname,"%s/.shmid-%s",ONLINEDIR,userid);
  if((fp=fopen(fname,"w"))==NULL)return;
  fprintf(fp,"%012d",shmid);
  fclose(fp);
  chown(fname,st.st_uid,st.st_gid);
}


int
online(char *shmname)
{
  char fname[256];  
  char *userid;
  struct stat buf;

  if(strstr(shmname,".shmid-")!=shmname)return 1;
  userid=strchr(shmname,'-')+1;
  sprintf(fname,"%s/%s",ONLINEDIR,userid);
  return (stat(fname,&buf)==0);
}


void
killshm(char *shmname)
{
  char fname[256];  
  FILE *fp;
  int shmid=0;
  struct shmid_ds buf;
  int i;

  if(strstr(shmname,".shmid-")!=shmname)return;

  sprintf(fname,"%s/_%s",ONLINEDIR,shmname);
  unlink(fname);

  sprintf(fname,"%s/%s",ONLINEDIR,shmname);

  if((fp=fopen(fname,"r"))==NULL)return;
  if(!fscanf(fp,"%d",&shmid))return;
  fclose(fp);

  if((thisshm=(struct shmuserrec *)shmat(shmid,NULL,0))==NULL)return;
  if(thisuseronl.userid[0]&&thisuseronl.loggedin){
    FILE *fp;
    char fname[256],command[256];
    int i;
    
    if(sysvar->lofaud){
      audit(thisuseronl.channel,
	    AUS_LOGOUT,AUD_LOGOUT,
	    thisuseronl.userid,
	    baudstg(thisuseronl.baudrate));
    }

    i=time(0);
    fp=fopen(RECENTFILE,"a");
    fprintf(fp,"%s %s %08lx %08x\n",thisuseronl.userid,
	    thisuseronl.channel,thisuseronl.loggedin,i);
    fclose(fp);

    sprintf(fname,"%s/%s",RECENTDIR,thisuseronl.userid);
    fp=fopen(fname,"a");
    fprintf(fp,"%s %08lx %08x\n",thisuseronl.channel,thisuseronl.loggedin,i);
    fclose(fp);

    sprintf(command,"(tail -%d %s >%s/tmp%08x;\\mv %s/tmp%08x %s;chown bbs.bbs %s %s) &",
	    RECENT_ENTRIES,fname,RECENTDIR,i,RECENTDIR,i,fname,
	    RECENTFILE,fname);
    system(command);

    sprintf(fname,"%s/.%s",ONLINEDIR,thisuseronl.channel);
    unlink(fname);
  }
  shmdt((char *)thisshm);

  i=shmctl(shmid,IPC_RMID,&buf);
  if(i)return;
  unlink(fname);
}


void
refreshclasses()
{
  struct stat s;
  stat(CLASSFILE,&s);
  if (s.st_ctime!=classtime) {
    classtime=s.st_ctime;
    initmodule(INITCLASSES);
  }
}


void
refreshsysvars()
{
  struct stat s;
  stat(SYSVARFILE,&s);
  if (s.st_ctime!=sysvartime && sysvar) {
    FILE *sysvarf;

    sysvartime=s.st_ctime;
    
    if((sysvarf=fopen(SYSVARFILE,"r"))!=NULL){
      fread(sysvar,sizeof(struct sysvar),1,sysvarf);
    }

    fclose(sysvarf);
  }
}


void
sysvarshm()
{
  struct stat st;
  struct shmid_ds buf;
  int    shmid;
  FILE   *fp;
  char   fname[256];
  int    tries;

  for(tries=0;tries<256;tries++){
    proj=(proj+1)%0xff;
    stat(SYSVARFILE,&st);
    errno=0;
    if((shmid=shmget(ftok(SYSVARFILE,proj),8192,IPC_CREAT|0x1ff))==-1)continue;
    else {
      tries=0;
      break;
    }
  }
  if(tries){
    initmodule(INITSYSVARS);
    return;
  }
  
  sprintf(fname,"%s/sysvar-shm",BBSETCDIR);
  if((fp=fopen(SYSVARSHMFILE,"w"))==NULL)return;
  fprintf(fp,"%012d",shmid);
  fclose(fp);
  chown(SYSVARSHMFILE,st.st_uid,st.st_gid);
  rmlock("LCK..sysvarshm");
  initmodule(INITSYSVARS);
  refreshsysvars();
  shmctl(shmid,IPC_RMID,&buf);
}


void
monitorshm()
{
  struct shmid_ds buf;
  int    shmid;
  FILE   *fp;

  shmid=shmget(IPC_PRIVATE,sizeof(struct monitor),IPC_CREAT|0666);
  if((fp=fopen(MONITORFILE,"w"))==NULL)return;
  fprintf(fp,"%012d",shmid);
  fclose(fp);
  system("chown bbs.bbs "MONITORFILE);
  chmod(MONITORFILE,0440);
  shmat(shmid,NULL,0);
  shmctl(shmid,IPC_RMID,&buf);
}


void
byebye(struct shmuserrec *ushm,int prompt)
{
  FILE *fp;
  char fname[64], *outbuf=getmsglang(prompt,ushm->acc.language-1);
	    
  if(outbuf){
    sprintf(fname,"/dev/%s",ushm->onl.emupty);
    if((fp=fopen(fname,"w"))!=NULL){
      fprintf(fp,"%s",outbuf);
    }
    fflush(fp);
    fclose(fp);
  }
  if(sysvar->lofaud)audit(ushm->onl.channel,
	AUS_LOGOUT,AUD_LOGOUT,ushm->acc.userid,baudstg(ushm->onl.baudrate));
  disconnect(ushm->onl.channel);
}


void
suptimeouts(char *tty)
{
  struct shmuserrec *ushm=NULL;
  int shmid;
  char supid[256];
  FILE *fp;

  sprintf(supid,"%s/.shmid-[SIGNUP-%s]",ONLINEDIR,tty);

  if((fp=fopen(supid,"r"))==NULL) return;
  if(!fscanf(fp,"%d",&shmid)) {
    logerror("bbsd","Unable to read file %s",supid);
    return;
  }
  fclose(fp);

  if((ushm=(struct shmuserrec *)shmat(shmid,NULL,0))==NULL) return;

  if(ushm->onl.idlezap){
    if((++ushm->onl.timeoutticks)>=(ushm->onl.idlezap*TICKSPERMIN)){
      char fname[256];
      sprintf(fname,"/dev/%s",tty);
      if((fp=fopen(fname,"w"))!=NULL){
	write(fileno(fp),getmsglang(IDLEBYE,ushm->acc.language-1),strlen(msgbuf));
	fclose(fp);
      }
      disconnect(tty);
      sprintf(supid,"%s/.shmid-[SIGNUP-%s]",ONLINEDIR,tty);
      unlink(supid);
    }
  }

  shmdt((char *)ushm);
}


void
eventexec(char *command)
{
  if(!fork()){
    struct passwd *pass=getpwnam(BBSUSERNAME);

    if(!pass)fatal("bbsd","User %s does not exist!",BBSUSERNAME);
    else {
      setgid(pass->pw_gid);
      setuid(pass->pw_uid);
      if(!chdir(BINDIR))system(command);
    }
    exit(0);
  }
}


void
events()
{
  if(!fork()){
    storepid();
    return;
  } else {
    struct dirent *dirent;
    DIR *dp;
    
    if((dp=opendir(EVENTDIR))==NULL){
      fatal("bbsd","Unable to opendir %s",EVENTDIR);
    }

    while((dirent=readdir(dp))!=NULL){
      if(dirent->d_name[0]!='.'){
	struct event event;
	FILE *fp;
	int t, hour, min;
	char s[256];
	
	memset(&event,0,sizeof(event));
	sprintf(s,"%s/%s",EVENTDIR,dirent->d_name);
	if((fp=fopen(s,"r"))==NULL)continue;
	fread(&event,sizeof(event),1,fp);
	fclose(fp);

	if(event.flags&EVF_NOW || event.flags&EVF_ASAP)continue;

	t=now();
	hour=tdhour(t);
	min=tdmin(t);
	
	if(hour==event.hour && min==event.min){
	  if(event.flags&EVF_ONLYONCE)unlink(s);
	  audit("BBS DAEMON",AUS_EVSPAWN,AUD_EVSPAWN,"[bbsd]",s);
	  eventexec(event.command);
	} else if(event.flags&EVF_WARN){
	  int t1 = hour*60+min;
	  int t2 = event.hour*60+event.min;
	  int t,i;

	  if(t2<t1)t2+=24*60;
	  
	  t=t2-t1;
	  for(i=0;warntimes[i]>0;i++){
	    if(t>=warntimes[i]){
	      if((t%warntimes[i])==0){
		char command[512];
		sprintf(command,"%s -warn %d",event.command,t);
		eventexec(command);
	      }
	      break;
	    }
	  }
	}
      }
    }
    closedir(dp);
  }

  exit(0);
}


void
asapevents()
{
  if(!fork()){
    storepid();
    return;
  } else {
    struct dirent *dirent;
    DIR *dp;
    int numusers=-1;
    
    if((dp=opendir(EVENTDIR))==NULL){
      fatal("bbsd","Unable to opendir %s",EVENTDIR);
    }

    while((dirent=readdir(dp))!=NULL){
      if(dirent->d_name[0]!='.'){
	struct event event;
	FILE *fp;
	char s[256];
	int i;
	
	memset(&event,0,sizeof(event));
	sprintf(s,"%s/%s",EVENTDIR,dirent->d_name);
	if((fp=fopen(s,"r"))==NULL)continue;
	fread(&event,sizeof(event),1,fp);
	fclose(fp);

	if((event.flags&EVF_ASAP)==0)continue;

	if(numusers<0){
	  for(i=0,numusers=0;i<numchannels;i++){
	    char majst[32],minst[32],user[32];
	    int  baud;
	    
	    if(!getlinestatus(channels[i].ttyname,majst,minst,&baud,user))continue;
	    if(!strcmp(minst,"USER"))numusers++;
	  }
	}

	if(numusers>0)break;

	unlink(s);
	audit("BBS DAEMON",AUS_EVSPAWN,AUD_EVSPAWN,"[bbsd]",s);
	eventexec(event.command);
      }
    }
    closedir(dp);
  }

  exit(0);
}


void
charge()
{
  int i;

  refreshclasses();
  refreshsysvars();
  for(i=0;i<numchannels;i++){
    struct shmuserrec *ushm=NULL;
    char majst[32],minst[32],user[32];
    int  baud;

    if(!getlinestatus(channels[i].ttyname,majst,minst,&baud,user))continue;

    if(strcmp(minst,"USER"))continue;

    if(!strcmp(user,"[SIGNUP]")){
      suptimeouts(channels[i].ttyname);
      continue;
    }

    if(!strcmp(user,"[UNIX]"))continue;
      
    if(!uinsystem(user,0,&ushm))continue;
    if(!ushm->onl.userid[0])continue;

    /* User related charges and time counts */
    
    ushm->onl.tick=(ushm->onl.tick+1)%TICKSPERMIN;
    ushm->onl.fraccharge+=(ushm->onl.credspermin)/TICKSPERMIN;

    if(!ushm->onl.tick){
      long charge=((long)ushm->onl.fraccharge)/100L;
      classrec *class=findclass(ushm->acc.curclss);

      sysvar->timever++;
      ushm->onl.onlinetime++;
      ushm->acc.timetdy++;
      ushm->acc.timever++;

      /* Credit charges */

      if(charge){
	if(class && class->flags&CF_NOCHRGE){
	  ushm->onl.fraccharge=0;
	} else {
	  ushm->acc.credits-=charge;
	  ushm->acc.credsever+=charge;
	  ushm->onl.statcreds+=charge;
	  ushm->onl.fraccharge%=100;
	  if(ushm->acc.credits<=0){
	    ushm->acc.credits=0;
	    byebye(ushm,NOCRDBYE);
	    if(class)changeclass(ushm->acc.userid,class->nocreds,0);
	  } else if((float)((float)ushm->acc.credits -
			    (float)((float)ushm->onl.credspermin/100.0))<=0.0){
	    injoth(&(ushm->onl),getmsglang(NOCREDS,ushm->acc.language-1),0);
	  }
	}
      }

      /* Time limit per call */

      if(class && class->limpercall>=0){
	if(ushm->onl.onlinetime>=class->limpercall){
	  byebye(ushm,NOCTIMBYE);
	  if(class)changeclass(ushm->acc.userid,class->nocreds,0);
	} else if(ushm->onl.onlinetime+1>=class->limpercall){
	  injoth(&(ushm->onl),getmsglang(NOCTIM,ushm->acc.language-1),0);
	}
      }
      
      /* Daily time limit */

      if(class && class->limperday>=0){
	if(ushm->acc.timetdy>=class->limperday){
	  byebye(ushm,NODTIMBYE);
	  if(class)changeclass(ushm->acc.userid,class->nocreds,0);
	} else if(ushm->acc.timetdy+1>=class->limperday){
	  injoth(&(ushm->onl),getmsglang(NODTIM,ushm->acc.language-1),0);
	}
      }
    }

    /* Inactivity Timeout */

    if(ushm->onl.idlezap && !(ushm->onl.flags&(OLF_NOTIMEOUT|OLF_BUSY))){
      if((++ushm->onl.timeoutticks)>=(ushm->onl.idlezap*TICKSPERMIN)){
	byebye(ushm,IDLEBYE);
      } else if(ushm->onl.timeoutticks==((ushm->onl.idlezap-1)*TICKSPERMIN)){
	sprintf(msgbuf,getmsglang(IDLEWRN,ushm->acc.language-1),
		ushm->onl.timeoutticks/TICKSPERMIN);
	injoth(&(ushm->onl),msgbuf,0);
      }
    }

    shmdt((char *)ushm);
  }
}


void
main(int argc, char *argv[])
{
/*   long clockticks=0;  */
  int  min,sec,oldsec=0,oldmin=0;
  long t;

  if (getuid()){
    fprintf(stderr, "%s: getuid: not super-user\n", argv[0]);
    exit(1);
  }

  if((onlinedir=opendir(ONLINEDIR))==NULL){
    fprintf(stderr, "%s: opendir: unable to opendir %s\n",argv[0],ONLINEDIR);
    exit(1);
  }

  switch(fork()){
  case -1:
    fprintf(stderr,"%s: fork: unable to fork daemon\n",argv[0]);
    exit(1);
  case 0:
    break;
  default:
    exit(0);
  }

  sysblk=opnmsg("sysvar");
  initmodule(INITTTYNUM);
  msg=opnmsg("sysvar");
  storepid();
  ioctl(0,TIOCNOTTY,NULL);

  sysvarshm();
  monitorshm();

  for(;;){
    seekdir(onlinedir,0);
    while((usronlrec=readdir(onlinedir))!=NULL){
      if(usronlrec->d_name[0]!='.' && usronlrec->d_name[0]!='_'
	 && !shmthere(usronlrec->d_name)){
	makeshm(usronlrec->d_name);
      } else if(usronlrec->d_name[0]=='_'){
	char fname[256];
	sprintf(fname,"%s/%s",ONLINEDIR,&(usronlrec->d_name[1]));
	unlink(fname);
	if(shmthere(&(usronlrec->d_name[1]))){
	  killshm(&(usronlrec->d_name[1]));
	  asapevents();
	} else {
	  sprintf(fname,"%s/%s",ONLINEDIR,usronlrec->d_name);
	  unlink(fname);
	}
      } else if (!online(usronlrec->d_name)){
	killshm(usronlrec->d_name);
	asapevents();
      }
    }
    usleep(SLEEPTIME);
    sec=tdsec(t=now());
    min=tdmin(t);
    if((sec%TICKTIME)==0){
      if(oldsec!=sec || oldmin!=min){
	if(!sec)events();
	charge();
	oldsec=sec;
	oldmin=min;
      }
    }
  }
}
