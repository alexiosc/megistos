


     SSSSZZZZ((((1111))))		OOOOmmmmeeeennnn TTTTeeeecccchhhhnnnnoooollllooooggggyyyy	IIIINNNNCCCC ((((OOOOMMMMEEEENNNN))))		 SSSSZZZZ((((1111))))



     NNNNAAAAMMMMEEEE
	  sx, sb, sz - Send Files with ZMODEM, YMODEM, or XMODEM
	  zcommand, zcommandi -	Send Commands with ZMODEM

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
	  sz [-++++aaaabbbbddddeeeeffffkkkkLLLLllllNNNNnnnnooooppppttttuuuuvvvvyyyyYYYYZZZZ] _f_i_l_e ...
	  sb [-ddddffffkkkkttttuuuuvvvv] _f_i_l_e ...
	  sx [-kkkkttttuuuuvvvv] _f_i_l_e
	  zcommand [-oooottttvvvv] CCCCOOOOMMMMMMMMAAAANNNNDDDD
	  zcommandi [-oooottttvvvv] CCCCOOOOMMMMMMMMAAAANNNNDDDD
	  sz -T


     LLLLIIIICCCCEEEENNNNSSSSEEEE AAAAGGGGRRRREEEEEEEEMMMMEEEENNNNTTTT
	  This is a copyrighted	shareware program.  Commercial use of
	  this program is subject to licensing conditions detailed in
	  the rz.c source code.	 "Commercial Use" includes any use of
	  this program to send files to	a commercial or	shareware
	  program not published	or licensed by Omen Technology INC.

	  Registration information is provided in the file mailer.rz.

	  Use of this program constitutes agreement to the License
	  Agreement.

     SSSSUUUUPPPPPPPPOOOORRRRTTTT
	  Unregistered users may dial 900-737-7836 (900-737-RTFM) for
	  technical assistance.	 There is a charge of $3.69 per	minute
	  to use this support line.  Callers must be 18	years or
	  older.

	  Registered users encountering	problems using this program on
	  standard serial ports	to transfer files with Professional-
	  YAM or ZCOMM may call	the support number listed in the
	  Professional-YAM/ZCOMM documentation.

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
	  SSSSzzzz (send ZMODEM) uses	the ZMODEM, YMODEM or XMODEM error
	  correcting protocol to send one or more files	over a dial-in
	  serial port to a variety of programs running under PC-DOS,
	  CP/M,	Unix, VMS, and other operating systems.

	  To obtain the	maximum	performance and	full functionality of
	  this program we recommend its	use with GSZ, Professional-YAM
	  or ZCOMM.

	  This program is intended to interface	with terminal
	  programs, not	to act as one.	This program is	not designed
	  to be	called from _c_u(_1) _t_i_p(_1), or other communications
	  programs.  Unix flavors of Omen Technology's Professional-
	  YAM communications software are available for	dial-out
	  applications.	 Unix Professional-YAM supports	dial-out



     Page 1					     (printed 2/18/94)






     SSSSZZZZ((((1111))))		OOOOmmmmeeeennnn TTTTeeeecccchhhhnnnnoooollllooooggggyyyy	IIIINNNNCCCC ((((OOOOMMMMEEEENNNN))))		 SSSSZZZZ((((1111))))



	  applications with telephone directory, a powerful script
	  language with	learn function,	high quality multiple protocol
	  support, and UUCP port arbitration.

	  SSSSzzzz sends one or more files with ZMODEM protocol.

	  ZMODEM greatly simplifies file transfers compared to XMODEM.
	  In addition to a friendly user interface, ZMODEM provides
	  Personal Computer and	other users an efficient, accurate,
	  and robust file transfer method.

	  ZMODEM provides complete EEEENNNNDDDD----TTTTOOOO----EEEENNNNDDDD data integrity between
	  application programs.	 ZMODEM's 32 bit CRC catches errors
	  that sneak into even the most	advanced networks.

	  Advanced file	management features include AutoDownload
	  (Automatic file Download initiated without user
	  intervention), Display of individual and total file lengths
	  and transmission time	estimates, Crash Recovery, selective
	  file transfers, and preservation of exact file date and
	  length.

	  The ----yyyy option	instructs the receiver to open the file	for
	  writing unconditionally.  The	----aaaa option causes the receiver
	  to convert Unix newlines to PC-DOS carriage returns and
	  linefeeds.


	  SSSSbbbb sends one or more files with YMODEM or ZMODEM protocol.
	  The initial ZMODEM initialization is not sent.  When
	  requested by the receiver, ssssbbbb	supports YYYYMMMMOOOODDDDEEEEMMMM----gggg with
	  "cbreak" tty mode, XON/XOFF flow control, and	interrupt
	  character set	to CAN (^X).  YYYYMMMMOOOODDDDEEEEMMMM----gggg (Professional-YAM gggg
	  option) increases YMODEM throughput over error free channels
	  (direct connection, X.PC, etc.) by disabling error recovery.

	  On Unix systems, additional information about	the file is
	  transmitted.	If the receiving program uses this
	  information, the transmitted file length controls the	exact
	  number of bytes written to the output	dataset, and the
	  modify time and file mode are	set accordingly.


	  SSSSxxxx sends a single _f_i_l_e with XXXXMMMMOOOODDDDEEEEMMMM or	XXXXMMMMOOOODDDDEEEEMMMM----1111kkkk protocol
	  (sometimes incorrectly called	"ymodem").  The	user must
	  supply the file name to both sending and receiving programs.

	  Iff sssszzzz is invoked with $SHELL	set and	iff that variable
	  contains the string _r_s_h or _r_k_s_h (restricted shell), sssszzzz
	  operates in restricted mode.	Restricted mode	restricts
	  pathnames to the current directory and PUBDIR	(usually
	  /usr/spool/uucppublic) and/or	subdirectories thereof.



     Page 2					     (printed 2/18/94)






     SSSSZZZZ((((1111))))		OOOOmmmmeeeennnn TTTTeeeecccchhhhnnnnoooollllooooggggyyyy	IIIINNNNCCCC ((((OOOOMMMMEEEENNNN))))		 SSSSZZZZ((((1111))))



	  The fourth form sends	a single COMMAND to a ZMODEM receiver
	  for execution.  ZZZZccccoooommmmmmmmaaaannnndddd exits with the COMMAND return
	  value.  If COMMAND includes spaces or	characters special to
	  the shell, it	must be	quoted.


	  The fifth form sends a single	COMMAND	to a ZMODEM receiver
	  for execution.  ZZZZccccoooommmmmmmmaaaannnnddddiiii exits as soon as the receiver has
	  correctly received the command, before it is executed.


	  The sixth form (sz -T) outputs all 256 code combinations to
	  the terminal.	 The hex value of the character, a space, and
	  the raw character are	sent, 8	per line.  In you are having
	  difficulty sending files, this command lets you see which
	  character codes are being eaten by the operating system or
	  network.  The	terminal program must be set to	display	all
	  256 codes in a distinct form.	 Check that each code is sent,
	  and that the 8th bit on codes	0x80 to	0xFF is	set.

	  Sz -T	then allows the	caller to input	characters which are
	  echoed in hex.  You should check that	all control characters
	  can be input this way.



	  The meanings of the available	options	are:

	  ++++    Instruct	the receiver to	append transmitted data	to an
	       existing	file (ZMODEM only).
	  aaaa    Instruct	the ZMODEM receiver to convert text file
	       format as appropriate for the receiving system.	Valid
	       only for	ZMODEM.
	  bbbb    (ZMODEM)	Binary override: transfer file without any
	       translation.
	  cccc    Instruct	the receiver to	change the pathname if the
	       destination file	exists.
	  dddd    Change all instances of "." to "/" in the transmitted
	       pathname.  Thus,	C.omenB0000 (which is unacceptable to
	       MSDOS or	CP/M) is transmitted as	C/omenB0000.  If the
	       resultant filename has more than	8 characters in	the
	       stem, a "." is inserted to allow	a total	of eleven.
	  eeee    Escape all control characters; normally only XON, XOFF,
	       DLE, CR-@-CR, and Ctrl-X	are escaped.
	  ffff    Send Full pathname.  Normally directory prefixes	are
	       stripped	from the transmitted filename.
	  gggg    Send ESC-[-?-3-4-l to start DSZ from Kermit.
	  kkkk    (XMODEM/YMODEM) Send files using	1024 byte blocks
	       rather than the default 128 byte	blocks.	 1024 byte
	       packets speed file transfers at high bit	rates.
	       (ZMODEM streams the data	for the	best possible
	       throughput.)



     Page 3					     (printed 2/18/94)






     SSSSZZZZ((((1111))))		OOOOmmmmeeeennnn TTTTeeeecccchhhhnnnnoooollllooooggggyyyy	IIIINNNNCCCC ((((OOOOMMMMEEEENNNN))))		 SSSSZZZZ((((1111))))



	  LLLLNNNN   Use ZMODEM sub-packets of length	N.  A larger N (32 <=
	       N <= 1024) gives	slightly higher	throughput, a smaller
	       N speeds	error recovery.	 The default is	128 below 300
	       baud, 256 above 300 baud, or 1024 above 2400 baud.
	  llllNNNN   Wait for	the receiver to	acknowledge correct data every
	       NNNN (32 <=	N <= 1024) characters.	This may be used to
	       avoid network overrun when XOFF flow control is
	       lacking.
	  nnnn    (ZMODEM)	Send each file if destination file does	not
	       exist.  Overwrite destination file if source file is
	       newer than the destination file.
	  NNNN    (ZMODEM)	Send each file if destination file does	not
	       exist.  Overwrite destination file if source file is
	       newer or	longer than the	destination file.
	  oooo    (ZMODEM)	Disable	automatic selection of 32 bit CRC.
	  pppp    (ZMODEM)	Protect	existing destination files by skipping
	       transfer	if the destination file	exists.
	  rrrr    (ZMODEM)	Resume interrupted file	transfer.  If the
	       source file is longer than the destination file,	the
	       transfer	commences at the offset	in the source file
	       that equals the length of the destination file.
	  rrrrrrrr   As above, but compares the files	(the portion common to
	       sender and receiver) before resuming the	transfer.
	  ttttttttiiiimmmm Change timeout to _t_i_m tenths of seconds.
	  uuuu    Unlink the file after successful	transmission.  Users
	       should not manually abort or skip file transfers	when
	       this option is used.
	  wwwwNNNN   Limit the transmit window size to N bytes (ZMODEM).
	  vvvv    Verbose causes a	list of	file names to be appended to
	       /tmp/szlog .  More v's generate more output.
	  yyyy    Instruct	a ZMODEM receiving program to overwrite	any
	       existing	file with the same name.
	  YYYY    Instruct	a ZMODEM receiving program to overwrite	any
	       existing	file with the same name, and to	skip any
	       source files that do have a file	with the same pathname
	       on the destination system.
	  ZZZZ    Use ZMODEM file compression to speed file transfer.

     DDDDIIIIAAAAGGGGNNNNOOOOSSSSTTTTIIIICCCCSSSS
	  Exit status is as follows: 0 for successful transfers.  1 if
	  unrecoverable	errors are detected.  2	if syntax errors or
	  file access problems are detected.  3	if the program was
	  terminated by	a caught interrupt.

     EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
	  ZZZZMMMMOOOODDDDEEEEMMMM FFFFiiiilllleeee TTTTrrrraaaannnnssssffffeeeerrrr (Unix to	DSZ/ZCOMM/Professional-YAM)
	  %%%% sssszzzz ----aaaa ****....cccc
	  This single command transfers	all .c files in	the current
	  Unix directory with conversion (----aaaa) to end of	line
	  conventions appropriate to the receiving environment.	 With
	  ZMODEM AutoDownload enabled, Professional-YAM	 and ZCOMM
	  will automatically receive the files after performing	a



     Page 4					     (printed 2/18/94)






     SSSSZZZZ((((1111))))		OOOOmmmmeeeennnn TTTTeeeecccchhhhnnnnoooollllooooggggyyyy	IIIINNNNCCCC ((((OOOOMMMMEEEENNNN))))		 SSSSZZZZ((((1111))))



	  security check.

	  %%%% sssszzzz ----YYYYaaaannnn ****....cccc	****....hhhh
	  Send only the	.c and .h files	that exist on both systems,
	  and are newer	on the sending system than the corresponding
	  version on the receiving system, converting Unix to DOS text
	  format.

	  ZZZZMMMMOOOODDDDEEEEMMMM CCCCoooommmmmmmmaaaannnndddd DDDDoooowwwwnnnnllllooooaaaadddd (Unix	to Professional-YAM)
	   cpszall:all
	      zcommand "c:;cd /yam/dist"
	      sz -ya $(YD)/*.me
	      sz -yb y*.exe
	      zcommand "cd /yam"
	      zcommandi	"!insms"
	  This Makefile	fragment uses zzzzccccoooommmmmmmmaaaannnndddd to issue	commands to
	  Professional-YAM to change current disk and directory.
	  Next,	sssszzzz transfers the ._m_e files from	the $YD	directory,
	  commanding the receiver to overwrite the old files and to
	  convert from Unix end	of line	conventions to PC-DOS
	  conventions.	The third line transfers some ._e_x_e files.  The
	  fourth and fifth lines command Pro-YAM to change directory
	  and execute a	PC-DOS batch file _i_n_s_m_s	. Since	the batch file
	  takes	considerable time, the zzzzccccoooommmmmmmmaaaannnnddddiiii form is used to allow
	  the program to exit immediately.

	  XXXXMMMMOOOODDDDEEEEMMMM FFFFiiiilllleeee TTTTrrrraaaannnnssssffffeeeerrrr (Unix to	Crosstalk)
	  % ssssxxxx ffffoooooooo....cccc
	  EEEESSSSCCCC
	  rrrrxxxx ffffoooooooo....cccc
	  The above three commands transfer a single file from Unix to
	  a PC and Crosstalk.  This combination	is much	slower and
	  less reliable	than ZMODEM.

     EEEERRRRRRRROOOORRRR MMMMEEEESSSSSSSSAAAAGGGGEEEESSSS
	  "Caught signal 99" indicates the program was not properly
	  compiled, refer to "bibi(99)"	in rbsb.c for details.

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
	  rz(omen), ZCOMM User's Manual, Professional-YAM User's
	  Manual, crc(omen), sq(omen), todos(omen), tocpm(omen),
	  tomac(omen), yam(omen)

	  Compile time options required	for various operating systems
	  are described	in the source file.

     FFFFIIIILLLLEEEESSSS
	  32 bit CRC code courtesy Gary	S. Brown.

	  sz.c,	crctab.c, rbsb.c, zm.c,	zmr.c, zmodem.h	Unix source
	  files




     Page 5					     (printed 2/18/94)






     SSSSZZZZ((((1111))))		OOOOmmmmeeeennnn TTTTeeeecccchhhhnnnnoooollllooooggggyyyy	IIIINNNNCCCC ((((OOOOMMMMEEEENNNN))))		 SSSSZZZZ((((1111))))



	  /tmp/szlog stores debugging output (sz -vv)

     TTTTEEEESSSSTTTTIIIINNNNGGGG FFFFEEEEAAAATTTTUUUURRRREEEE
	  The command "sz -T file" exercises the AAAAttttttttnnnn sequence error
	  recovery by commanding errors	with unterminated packets.
	  The receiving	program	should complain	five times about
	  binary data packets being too	long.  Each time sssszzzz is
	  interrupted, it should send a	ZDATA header followed by
	  another defective packet.  If	the receiver does not detect
	  five long data packets, the AAAAttttttttnnnn sequence is not
	  interrupting the sender, and the MMMMyyyyaaaattttttttnnnn string in sssszzzz....cccc must
	  be modified.

	  After	5 packets, sssszzzz stops the	"transfer" and prints the
	  total	number of characters "sent" (Tcount).  The difference
	  between Tcount and 5120 represents the number	of characters
	  stored in various buffers when the Attn sequence is
	  generated.

     SSSSEEEERRRRVVVVEEEERRRR////NNNNEEEETTTTWWWWOOOORRRRKKKK NNNNOOOOTTTTEEEESSSS
	  Terminals on some timesharing	systems	are connected
	  indirectly to	the host with TTTTEEEERRRRMMMMIIIINNNNAAAALLLL SSSSEEEERRRRVVVVEEEERRRRSSSS operating over
	  networks.  Terminal servers often interfere with file
	  transfers by "eating"	control	characters and/or losing data.

	  When terminal	servers	interfere with file transfers, server
	  commands are often available to help the problem.  When
	  possible, enable the server and modems for hardware flow
	  control in and out.  Set the terminal	server to telnet
	  transparent mode.  Some typical commands are "SET TERMINAL
	  DOWNLOAD" and	"SET TERMINAL NO ESC", but there is no
	  standard set of commands suitable for	all terminal servers.

	  Escaping control characters (sz -e) may help if the transfer
	  gets stuck in	the same place on every	attempt.
	  Professional-YAM and ZCOMM allow selection of	which control
	  characters need to be	escaped.  In extreme cases 7-bit
	  transmission may be required (see the	Professional-YAM/ZCOMM
	  manual).

	  If you encounter problems with control characters Please
	  refer	to the sz -T command in	sz.doc for more	help.

	  Flow control between the server and modem is often
	  defective.  This rarely causes a problem in interactive
	  applications whose short bursts (a screenfull	at most) fit
	  within the available memory buffers.	Streaming protocols
	  such as YMODEM-g, long packet	SuperKermit, and ZMODEM	can
	  overload the available buffering.  Some terminal servers
	  support commands to enable hardware flow control such	as
	  "TERM	FLOWCONTROL HARDWARE IN	OUT"; this assumes the modem
	  attached to the server is properly configured.



     Page 6					     (printed 2/18/94)






     SSSSZZZZ((((1111))))		OOOOmmmmeeeennnn TTTTeeeecccchhhhnnnnoooollllooooggggyyyy	IIIINNNNCCCC ((((OOOOMMMMEEEENNNN))))		 SSSSZZZZ((((1111))))



	  If the terminal server is too	brain damaged to support flow
	  control, you can fake	it with	ZMODEM.	 Try "sz -
	  w1024	file..." to enable software flow control. Experiment
	  with different values	to find	the best throughput.

	  Terminal servers are designed	to accept keyboard input from
	  human	operators.  They may lose data when a program sends
	  data to the host faster than humans type.  Some servers
	  allow	larger input buffers to	support	file uploads.  If you
	  can upload short files (less than 100	bytes) but not longer
	  files, try "sz -w1024	file..." with your uploading program.
	  (Not all programs support this option; use ZCOMM or
	  Professional-YAM.)

	  When both flow control and character transparency are
	  problems, use	"sz -ew1024 file..." as	a starting point.

	  Sometimes the	terminal server	software is defective and must
	  be upgraded.	Please contact the network's vendor for
	  corrective procedures.  An alternative is to install direct
	  serial ports for users desiring to upload files.

	  Some systems enforce a timeout which disconnects a user
	  after	several	minutes	of no keyboarding.  This can cause
	  problems in long, error free ZMODEM transfers.  Restricting
	  the window size with a "-w8192" option provides terminal
	  input	at regular intervals even when no error	correction is
	  needed.  If problems persist,	try setting a packet length
	  (sz -l1024).

     NNNNOOOOTTTTEEEESSSS
	  Particular attention must be paid to flow control.  The
	  modem	and Unix must agree on the flow	control	method.	 Sz on
	  USG (SYS III/V) systems use XON/XOFF flow control.  Some
	  terminal servers do not provide working flow control.	 If
	  flow control cannot be properly set up,
	  Try a	"-w1024" option	(given to the sending program) to
	  enforce protocol level flow control.	Experiment with
	  different window sizes for best results.

	  Telebit modems must not be set to "spoof" UUCP, XMODEM,
	  YMODEM, or KERMIT.  Setting one of these spoofing modes
	  interferes with other	protocols.  Telebit's YMODEM spoofing
	  interferes with YMODEM transfers.

	  If a program that does not properly implement	the specified
	  file transfer	protocol causes	_s_b to "hang" the port after a
	  failed transfer, either wait for _s_b to time out or keyboard
	  a dozen Ctrl-X characters.  Every reported instance of this
	  problem has been corrected by	using ZCOMM, Pro-YAM, DSZ, or
	  other	program	with a correct implementation of the specified
	  protocol.



     Page 7					     (printed 2/18/94)






     SSSSZZZZ((((1111))))		OOOOmmmmeeeennnn TTTTeeeecccchhhhnnnnoooollllooooggggyyyy	IIIINNNNCCCC ((((OOOOMMMMEEEENNNN))))		 SSSSZZZZ((((1111))))



	  Many programs	claiming to support YMODEM only	support	XMODEM
	  with 1k blocks, and they often don't get that	quite right.
	  XMODEM transfers add up to 127 garbage bytes per file.
	  XMODEM-1k and	YMODEM-1k transfers use	128 byte blocks	to
	  avoid	extra padding.

	  YMODEM programs use the file length transmitted at the
	  beginning of the transfer to prune the file to the correct
	  length; this may cause problems with source files that grow
	  during the course of the transfer.  This problem does	not
	  pertain to ZMODEM transfers, which preserve the exact	file
	  length unconditionally.

	  Most ZMODEM options are merely passed	to the receiving
	  program; some	programs do not	implement all of these
	  options.

	  Circular buffering and a ZMODEM sliding window should	be
	  used when input is from pipes	instead	of acknowledging
	  frames each 1024 bytes.  If no files can be opened, sssszzzz sends
	  a ZMODEM command to echo a suitable complaint; perhaps it
	  should check for the presence	of at least one	accessible
	  file before getting hot and bothered.

	  Unix Professional-YAM	provides higher	performance and	other
	  features not supported by _s_z.	Please contact Omen Technology
	  Inc for product information.

	  Omen Technology INC
	  503-621-3406
	  Post Office Box 4681
	  Portland OR 97208


     BBBBUUUUGGGGSSSS
	  On at	least one BSD system, sz would abend it	got within a
	  few kilobytes	of the end of file.
	  Using	the "-w8192" option fixed the problem.	The real cause
	  is unknown, perhaps a	bug in the kernel TTY output routines.

	  The test mode	leaves a zero length file on the receiving
	  system.













     Page 8					     (printed 2/18/94)



