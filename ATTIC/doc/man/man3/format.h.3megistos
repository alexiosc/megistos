.TH "format.h" 3 "18 May 2004" "Megistos API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
format.h \- Low-level text formatting and output.  

.SH SYNOPSIS
.br
.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBRCS_VER\fP   '$Id: format.h,v 1.4 2003/09/27 20:30:51 alexios Exp $'"
.br
.ti -1c
.RI "#define \fBPAUSE_NONSTOP\fP   1 /**< The user opted for a non-stop listing. */"
.br
.RI "\fIThe user opted for a non-stop listing. \fP"
.ti -1c
.RI "#define \fBPAUSE_QUIT\fP   2 /**< The user quit a listing. */"
.br
.RI "\fIThe user quit a listing. \fP"
.ti -1c
.RI "#define \fBPAUSE_CONTINUE\fP   3 /**< The user continued a paged listing. */"
.br
.RI "\fIThe user continued a paged listing. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBfmt_setpausetext\fP (char *pausetext)"
.br
.RI "\fIChange the pager prompt. \fP"
.ti -1c
.RI "void \fBfmt_output\fP (char *s)"
.br
.RI "\fILow level output function. \fP"
.ti -1c
.RI "void \fBfmt_setlinelen\fP (int i)"
.br
.RI "\fISet the length of a line. \fP"
.ti -1c
.RI "void \fBfmt_setformatting\fP (int i)"
.br
.RI "\fIEnable or disable formatting. \fP"
.ti -1c
.RI "void \fBfmt_setverticalformat\fP (int i)"
.br
.RI "\fISet paging mode. \fP"
.ti -1c
.RI "void \fBfmt_setscreenheight\fP (int i)"
.br
.RI "\fISet screen height. \fP"
.ti -1c
.RI "int \fBfmt_screenpause\fP (void)"
.br
.RI "\fIInvokes the screen pager. \fP"
.ti -1c
.RI "int \fBfmt_forcedpause\fP (void)"
.br
.RI "\fIForces a screen pause. \fP"
.ti -1c
.RI "void \fBfmt_resetvpos\fP (int i)"
.br
.RI "\fISets the perceived vertical position. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBfmt_lastresult\fP"
.br
.RI "\fIThe last paging result. \fP"
.ti -1c
.RI "int \fBfmt_screenheight\fP"
.br
.RI "\fIThe current screen height in rows. \fP"
.ti -1c
.RI "int \fBfmt_verticalformat\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Low-level text formatting and output. 

\fBAuthor:\fP
.RS 4
Alexios
.RE
.PP
This module provides low-level access to the formatter engine. You really shouldn't use anything in here, unless you know what you're doing. It's far better to use the higher-level functions provided elsewhere and to leave the low level formatting chores to the library.
.PP
Original banner, legalese and change history follow.
.PP
\fB\fP.RS 4
.PP
.nf


 ***************************************************************************** 
 **                                                                         **
 **  FILE:     format.h                                                     **
 **  AUTHORS:  Alexios                                                      **
 **  REVISION: A, July 94                                                   **
 **  PURPOSE:  Low level text formatting and output routines                **
 **  NOTES:    Interface to format.c                                        **
 **  LEGALESE:                                                              **
 **                                                                         **
 **  This program is free software; you  can redistribute it and/or modify  **
 **  it under the terms of the GNU  General Public License as published by  **
 **  the Free Software Foundation; either version 2 of the License, or (at  **
 **  your option) any later version.                                        **
 **                                                                         **
 **  This program is distributed  in the hope  that it will be useful, but  **
 **  WITHOUT    ANY WARRANTY;   without  even  the    implied warranty  of  **
 **  MERCHANTABILITY or  FITNESS FOR  A PARTICULAR  PURPOSE.   See the GNU  **
 **  General Public License for more details.                               **
 **                                                                         **
 **  You  should have received a copy   of the GNU  General Public License  **
 **  along with    this program;  if   not, write  to  the   Free Software  **
 **  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.              **
 **                                                                         **
 *****************************************************************************


 *
 * $Id: format.h,v 1.4 2003/09/27 20:30:51 alexios Exp $
 *
 * $Log: format.h,v $
 * Revision 1.4  2003/09/27 20:30:51  alexios
 * Documented more of the file and moved existing documentation from
 * doc++ to doxygen format.
 *
 * Revision 1.3  2001/04/22 14:49:04  alexios
 * Merged in leftover 0.99.2 changes and additional bug fixes.
 *
 * Revision 0.2  1997/11/06 20:03:39  alexios
 * Added GPL legalese to the top of this file.
 *
 * Revision 0.1  1997/08/26 15:48:53  alexios
 * First registered revision. Adequate.
 *
 *
 *

.PP
.RE
.PP

.PP
Definition in file \fBformat.h\fP.
.SH "Define Documentation"
.PP 
.SS "#define RCS_VER   '$Id: format.h,v 1.4 2003/09/27 20:30:51 alexios Exp $'"
.PP
Definition at line 65 of file format.h.
.SH "Function Documentation"
.PP 
.SS "int fmt_forcedpause (void)"
.PP
Forces a screen pause. This function forces a screen pause regardless of our current vertical position. I can think of no reason users programs should need this, but it's available. 
.SS "void fmt_output (char * s)"
.PP
Low level output function. This function does the actual formatting and printing of prompts, messages and what not. It should not be used because of its low level. If you need to print a prompt, put it in a prompt block and use \fC\fBprompt()\fP\fP. If you need to print a string, use the \fC\fBprint()\fP\fP function, which is nice and \fCprintf()\fP-like.
.PP
\fBParameters:\fP
.RS 4
\fIs\fP a string to print. The string may contain special formatting directives which are processed and output. 
.RE
.PP

.SS "void fmt_resetvpos (int i)"
.PP
Sets the perceived vertical position. This function resets the formatter's idea of where we currently are on the screen. You really shouldn't use this (there are formatting directives that provide better access to this feature).
.PP
\fBParameters:\fP
.RS 4
\fIi\fP the new vertical position. A value of zero means top-of-screen. 
.RE
.PP

.SS "int fmt_screenpause (void)"
.PP
Invokes the screen pager. This function causes the screen pager to issue the Nonstop/Quit/Continue/Step message, if that is necessary. You should not use this from within user modules. The function is called from within the formatting engine.
.PP
\fBWarning:\fP
.RS 4
If you need to force a pause, use \fBfmt_forcedpause()\fP, not this function.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIi\fP the new screen height in rows. 
.RE
.PP

.SS "void fmt_setformatting (int i)"
.PP
Enable or disable formatting. You can use this function to enable or disable automatic formatting of text. As with most functions in \fC\fBformat.h\fP\fP, you should not use this unless you know what you're doing. The BBS library uses this function to temporarily inhibit formatting in order to print certain things (like the verbatim contents of a file).
.PP
Calling this function resets \fBfmt_lastresult\fP to 0.
.PP
\fBParameters:\fP
.RS 4
\fIi\fP the new state of the formatting engine. A value of zero disables formatting. Non-zero values enable it. 
.RE
.PP

.SS "void fmt_setlinelen (int i)"
.PP
Set the length of a line. This function alters the formatter's idea of what the length of a line is. This is the same as the number of columns (80, for instance). You should not use this function in user programs. It is only used by the initialisation code to set the line length to match the one preferred by the user.
.PP
\fBParameters:\fP
.RS 4
\fIi\fP the new length of the line. 
.RE
.PP

.SS "void fmt_setpausetext (char * pausetext)"
.PP
Change the pager prompt. This function changes the `Nonstop/Quit/Continue/Step' message to a user supplied value. This is executed internally to set the value read from the system customisation block. You should not need to use it yourself.
.PP
\fBParameters:\fP
.RS 4
\fIpausetext\fP the new pause text. 
.RE
.PP

.SS "void fmt_setscreenheight (int i)"
.PP
Set screen height. This function changes the perceived height of the screen. This is the same as the number of rows, typically 25 on a terminal without status lines. This function is mostly used internally to set the formatter to what the user prefers as their screen height.
.PP
\fBParameters:\fP
.RS 4
\fIi\fP the new screen height in rows. 
.RE
.PP

.SS "void fmt_setverticalformat (int i)"
.PP
Set paging mode. This function controls screen paging. You shouldn't turn screen paging off, unless you really know what you're doing. Turning off the pager results in no pauses for long messages or lists. This implies that users won't (normally) be able to stop any lists once they have started displaying.
.PP
\fBParameters:\fP
.RS 4
\fIi\fP the new state of the pager. A value of zero disables screen paging. Non-zero values enable it. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "int \fBfmt_lastresult\fP"
.PP
The last paging result. Test this variable against one of the \fCPAUSE_x\fP results codes to see what the user did at the last page break. Please see the documentation of the \fCPAUSE_x\fP codes for more information. Definition at line 285 of file format.h.
.SS "int \fBfmt_screenheight\fP"
.PP
The current screen height in rows. Definition at line 290 of file format.h.
.SS "int \fBfmt_verticalformat\fP"
.PP
Definition at line 293 of file format.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for Megistos API from the source code.
