.TH "User Account Handling" 3 "18 May 2004" "Megistos API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
User Account Handling \- This part of the API defines structures used to manage user accounts and operators on them.  

.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "group\fBUser preference flags\fP"
.br
.RI "\fIUser preference flags. \fP"
.PP
.in +1c

.ti -1c
.RI "group\fBSysop commands and privileges\fP"
.br
.RI "\fISysop command and privilege constants. \fP"
.PP
.in +1c

.ti -1c
.RI "group\fBUser account flags (UFL_x)\fP"
.br
.RI "\fIUser account flags. \fP"
.PP
.in +1c

.ti -1c
.RI "group\fBUser sexes (USX_x)\fP"
.br
.RI "\fIUser sexes. \fP"
.PP
.in +1c

.ti -1c
.RI "group\fBClub Flags (CLF_x)\fP"
.br
.RI "\fIFlags used to describe clubs in the club header. \fP"
.PP
.in +1c

.ti -1c
.RI "group\fBOnline user flags (OLF_x)\fP"
.br
.RI "\fITemporary user state and preferences. \fP"
.PP
.in +1c

.ti -1c
.RI "group\fBPage states (PGS_x)\fP"
.br
.RI "\fIUser paging restrictions. \fP"
.PP
.in +1c

.ti -1c
.RI "group\fBUsers and shared memory\fP"
.br
.RI "\fIShared user particulars. \fP"
.PP

.in -1c
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBuseracc_t\fP"
.br
.RI "\fIUser account structure. \fP"
.ti -1c
.RI "struct \fBclassrec_t\fP"
.br
.RI "\fIUser class. \fP"
.ti -1c
.RI "struct \fBonlinerec_t\fP"
.br
.RI "\fIUser online structure. \fP"
.ti -1c
.RI "struct \fBinjoth_buf\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBDELIM\fP   '!@#$%^&*-_=+.:'"
.br
.ti -1c
.RI "#define \fBUSR_MAGIC\fP   'USER'"
.br
.RI "\fIUser account magic. \fP"
.ti -1c
.RI "#define \fBML\fP   NUMLANGUAGES"
.br
.ti -1c
.RI "#define \fBONL_MAGIC\fP   'OUSR'"
.br
.ti -1c
.RI "#define \fBCRD_PAID\fP   1"
.br
.ti -1c
.RI "#define \fBCRD_FREE\fP   0"
.br
.ti -1c
.RI "#define \fBSTF_FIRST\fP   1"
.br
.ti -1c
.RI "#define \fBINJ_MESSAGE\fP   1	/**< Simple injected message */"
.br
.RI "\fISimple injected message. \fP"
.ti -1c
.RI "#define \fBINJ_MESSAGE_ACK\fP   2	/**< Injected message with acknowledgement */"
.br
.RI "\fIInjected message with acknowledgement. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBclassrec_t\fP * \fBcls_find\fP (char *s)"
.br
.RI "\fIFind a user class. \fP"
.ti -1c
.RI "int \fBusr_exists\fP (char *uid)"
.br
.RI "\fICheck for the existence of a user. \fP"
.ti -1c
.RI "int \fBusr_loadaccount\fP (char *whose, \fBuseracc_t\fP *uacc)"
.br
.RI "\fIRead a user account from file. \fP"
.ti -1c
.RI "int \fBusr_loadonlrec\fP (char *whose, \fBonlinerec_t\fP *onlrec)"
.br
.RI "\fIRead a user online structure from file. \fP"
.ti -1c
.RI "int \fBusr_saveaccount\fP (\fBuseracc_t\fP *uacc)"
.br
.RI "\fIWrite a user account to disk. \fP"
.ti -1c
.RI "int \fBusr_saveonlrec\fP (\fBonlinerec_t\fP *onlrec)"
.br
.RI "\fIWrite a user online record to disk. \fP"
.ti -1c
.RI "void \fBusr_postcredits\fP (char *userid, int amount, int paid)"
.br
.RI "\fIPost credits to a user account. \fP"
.ti -1c
.RI "void \fBusr_chargecredits\fP (int amount)"
.br
.RI "\fICharge a user's account. \fP"
.ti -1c
.RI "int \fBusr_canpay\fP (int amount)"
.br
.RI "\fICheck if the user has enough credits. \fP"
.ti -1c
.RI "void \fBusr_setclass\fP (char *userid, char *newclass, int permanent)"
.br
.RI "\fIChange a user's class. \fP"
.ti -1c
.RI "int \fBusr_insystem\fP (char *userid, int checkinvis, struct \fBshmuserrec\fP **buf)"
.br
.RI "\fICheck if a user is online (deprecated). \fP"
.ti -1c
.RI "int \fBusr_insys\fP (char *userid, int checkinvis)"
.br
.RI "\fICheck if a user is online and attach shared segment. \fP"
.ti -1c
.RI "int \fBusr_injoth\fP (\fBonlinerec_t\fP *user, char *msg, int force)"
.br
.RI "\fIPage another user with a message. \fP"
.ti -1c
.RI "int \fBusr_injoth_ack\fP (\fBonlinerec_t\fP *user, char *msg, char *ack, int force)"
.br
.RI "\fIPage another user with a message and acknowledgement. \fP"
.ti -1c
.RI "int \fBusr_uidxref\fP (char *userid, int online)"
.br
.RI "\fIUser ID completion. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBclassrec_t\fP * \fBcls_classes\fP"
.br
.RI "\fIArray of all defined user classes. \fP"
.ti -1c
.RI "int \fBcls_count\fP"
.br
.RI "\fINumber of classes in \fCcls_classes\fP. \fP"
.in -1c
.SH "Detailed Description"
.PP 
This part of the API defines structures used to manage user accounts and operators on them. 
.SH "Define Documentation"
.PP 
.SS "#define CRD_FREE   0"
.PP
Definition at line 1138 of file useracc.h.
.SS "#define CRD_PAID   1"
.PP
Definition at line 1137 of file useracc.h.
.SS "#define DELIM   '!@#$%^&*-_=+.:'"
.PP
Definition at line 138 of file useracc.h.
.SS "#define INJ_MESSAGE   1	/**< Simple injected message */"
.PP
Simple injected message. Definition at line 1231 of file useracc.h.
.SS "#define INJ_MESSAGE_ACK   2	/**< Injected message with acknowledgement */"
.PP
Injected message with acknowledgement. Definition at line 1233 of file useracc.h.
.SS "#define ML   NUMLANGUAGES"
.PP
Definition at line 811 of file useracc.h.
.SS "#define ONL_MAGIC   'OUSR'"
.PP
Definition at line 937 of file useracc.h.
.SS "#define STF_FIRST   1"
.PP
Definition at line 1140 of file useracc.h.
.SS "#define USR_MAGIC   'USER'"
.PP
User account magic. Definition at line 271 of file useracc.h.
.SH "Function Documentation"
.PP 
.SS "\fBclassrec_t\fP* cls_find (char * s)"
.PP
Find a user class. \fBParameters:\fP
.RS 4
\fIs\fP The name of a class to look for. The match is full-string and case sensitive.
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the \fC\fBclassrec_t\fP\fP for the required class, or \fCNULL\fP if the class could not be located. 
.RE
.PP

.SS "int usr_canpay (int amount)"
.PP
Check if the user has enough credits. Checks if the current user has enough credits, presumably as a preamble to charging the user's account. Don't forget that credits are a constantly diminishing quantity. Always check if a user can pay, but do it right before charging the user. Otherwise, the user may be able to pay now, but not when you actually call \fC\fBusr_chargecredits()\fP\fP.
.PP
\fBParameters:\fP
.RS 4
\fIamount\fP The number of credits to check for.
.RE
.PP
\fBReturns:\fP
.RS 4
Non-zero if the user's credits are greater than or equal to { amount}. Zero otherwise.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBusr_postcredits()\fP. 
.RE
.PP

.SS "void usr_chargecredits (int amount)"
.PP
Charge a user's account. Debits (i.e removes) the specified amount of credits from this user's account. There is purposefully no functionality to debit other users' accounts. You can use \fC\fBusr_canpay()\fP\fP to determine if the user has enough credits to cover the \fCamount\fP.
.PP
\fBParameters:\fP
.RS 4
\fIamount\fP The amount of credits to debit to the current user.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBusr_postcredits()\fP, \fBusr_canpay()\fP. 
.RE
.PP

.SS "int usr_exists (char * uid)"
.PP
Check for the existence of a user. Checks if the specified user exists. If the user does exist, the canonical form of the user ID (i.e. the properly capitalised version of the ID provided) overwrites the provided user ID.
.PP
\fBParameters:\fP
.RS 4
\fIuid\fP A user ID to look for. The match is case insensitive. The properly capitalised user ID overwrites this string on success.
.RE
.PP
\fBReturns:\fP
.RS 4
Zero if the user could not be located. One if the user is located, in which case, \fCuid\fP will contain the canonical form of the ID. 
.RE
.PP

.SS "int usr_injoth (\fBonlinerec_t\fP * user, char * msg, int force)"
.PP
Page another user with a message. `Injects' a string to another user (hence the name).
.PP
\fBParameters:\fP
.RS 4
\fIuser\fP A pointer to the other user's \fC\fBonlinerec_t\fP\fP. You should obviously attach the other user's shared segment first, by calling \fC\fBusr_insys()\fP\fP. As a side effect, this will also make sure the other user is actually on-line.
.br
\fImsg\fP A null-terminated string holding the message to send to the user. No need for the message to be fully formatted, but it should \fIin the other user's language\fP. Having attached the other user's online record, you know what language they're using. Use the function \fC\fBmsg_getl()\fP\fP to obtain prompts in the other user's language, and \fCsprintf()\fP to embed information in them. Any substitution variables in the string will be expanded in the other user's context. The string should be smaller than the maximum System V IPC message size, \fCMSGMAX\fP (4080 bytes on Linux, your mileage may vary). This is acceptable, though. You should aim to send really small messages to other users. Large ones are bound to be annoying in the superlative.
.br
\fIforce\fP If non-zero, the function will not respect the \fCOLF_BUSY\fP flag in the user's online record, sending the message even if the user is unable to receive it. Never do this unless absolutely necessary. The system does this to notify the user of imminent disconnections, but that's usually an emergency for the user. Bear in mind that the user may not be able to receive the message immediately. Stored pages work this way.
.RE
.PP
\fBReturns:\fP
.RS 4
Zero if the message could not be injected. One if it was successfully sent. This is asynchronous: the user may actually see the message at a later time.
.RE
.PP
\fBSee also:\fP
.RS 4
\fC\fBusr_injoth_ack()\fP\fP. 
.RE
.PP

.SS "int usr_injoth_ack (\fBonlinerec_t\fP * user, char * msg, char * ack, int force)"
.PP
Page another user with a message and acknowledgement. `Injects' a string to another user and sends back delivery ackowledgement to the original user. Injected messages are displayed asynchronously. If the recipient user is in the process of typing a line, the message will not appear until the user has pressed Enter (there's a way to force synchronous delivery, but it's not considered polite to the user because it disrupts their typing). However, the user may be unable to receive the message for a considerable length of time: maybe they're the Sysop and currently running a UNIX shell, or in the full screen editor. In such cases, it may be necessary to send an acknowledgement note back to the sender of the injected message when that message finally gets delivered. The /p(age) command does that if the recipient allows it.
.PP
\fBParameters:\fP
.RS 4
\fIuser\fP A pointer to the other user's \fC\fBonlinerec_t\fP\fP. You should obviously attach the other user's shared segment first, by calling { \fBusr_insys()\fP}. As a side effect, this will also make sure the other user is actually on-line.
.br
\fImsg\fP A null-terminated string holding the message to send to the user. No need for the message to be fully formatted, but it should {\fIin\fP the other user's language}. Having attached the other user's online record, you know what language they're using. Use the function \fC\fBmsg_getl()\fP\fP to obtain prompts in the other user's language, and \fCsprintf()\fP to embed information in them. Any substitution variables in the string will be expanded in the other user's context.
.br
\fIack\fP A null-terminated string holding the acknowledgement to be injected back to the original user upon delivery of the injected message. The total length of \fCmsg\fP and \fCack\fP must be less than the maximum System V IPC message size, \fCMSGMAX\fP (4080 bytes on Linux, your mileage may vary). This is acceptable, though. You should aim to send really small messages to other users. Large ones are bound to be annoying in the superlative.
.br
\fIforce\fP If non-zero, the function will not respect the \fCOLF_BUSY\fP flag in the user's online record, sending the message even if the user is unable to receive it. Never do this unless absolutely necessary. The system does this to notify the user of imminent disconnections, but that's usually an emergency for the user. Bear in mind that the user may not be able to receive the message immediately. Stored pages work this way.
.RE
.PP
\fBReturns:\fP
.RS 4
Zero if the message could not be injected. One if it was successfully sent. This is asynchronous: the user may actually see the message at a later time. An acknowledgement will eventually be injected back to the sender \fIonly\fP if the return value is 1 (i.e. no errors have occurred).
.RE
.PP
\fBSee also:\fP
.RS 4
\fC\fBusr_injoth()\fP\fP. 
.RE
.PP

.SS "int usr_insys (char * userid, int checkinvis)"
.PP
Check if a user is online and attach shared segment. Checks if the specified user is online, taking invisibility into account. If the user \fIis\fP online, the corresponding shared segment is attached as the `other user'.
.PP
\fBParameters:\fP
.RS 4
\fIuserid\fP The user ID to check for. It need not be in canonical form; the function will call \fC\fBusr_exists()\fP\fP internally.
.br
\fIcheckinvis\fP If non-zero and the user is online but invisible, the function will pretend the user is not online. If \fCcheckinvis\fP is zero and the user is online, invisibility is not taken into account and the function will not `lie'.
.RE
.PP
\fBReturns:\fP
.RS 4
Zero if the user is not online; one if they are. 
.RE
.PP

.SS "int usr_insystem (char * userid, int checkinvis, struct \fBshmuserrec\fP ** buf)"
.PP
Check if a user is online (deprecated). Checks if the specified user is online, taking invisibility into account. If the user \fIis\fP online, the corresponding shared segment is attached and a pointer to it is returned.
.PP
\fBParameters:\fP
.RS 4
\fIuserid\fP The canonical form of the user ID to operate on. You can use \fC\fBusr_exists()\fP\fP to render a user ID in its canonical form.
.br
\fIcheckinvis\fP If non-zero and the user is online but invisible, the function will pretend the user is not online. If \fCcheckinvis\fP is zero and the user is online, invisibility is not taken into account and the function will not `lie'.
.br
\fIbuf\fP A pointer (passed by reference) to a user shared segment. If the call is successful and user `\fCuserid\fP' is online, the corresponding shared memory segment will be attached to this process and a pointer to the segment will be written to \fCbuf\fP.
.RE
.PP
\fBReturns:\fP
.RS 4
Zero if the user is not online; one if they are.
.RE
.PP
.PP
\fBDeprecated\fP
.RS 4
Do not use this function. It is easy to misuse it. Please use the simpler \fC\fBusr_insys()\fP\fP function that does not suffer from the same problems. This function is for internal use only. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBusr_insys()\fP. 
.RE
.PP

.SS "int usr_loadaccount (char * whose, \fBuseracc_t\fP * uacc)"
.PP
Read a user account from file. Loads the specified account from disk. This function is called by the system. Under any normal circumstances, you won't need to call it.
.PP
\fBParameters:\fP
.RS 4
\fIwhose\fP The canonical form of the user ID to load. You can use \fC\fBusr_exists()\fP\fP to obtain this.
.br
\fIuacc\fP A pointer to a pre-allocated \fC\fBuseracc_t\fP\fP to hold the account structure.
.RE
.PP
\fBReturns:\fP
.RS 4
Zero if the user could not be loaded, in which case, \fCerrno\fP will be set to the error reported by the system. One if the user was loaded successfully, in which case the account will be in \fCuacc\fP.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBusr_saveaccount()\fP. 
.RE
.PP

.SS "int usr_loadonlrec (char * whose, \fBonlinerec_t\fP * onlrec)"
.PP
Read a user online structure from file. Loads the specified structure from disk. Although online records are temporary and relatively volatile, they \fIare\fP saved to disk between module changes for security's sake. This function is called by the system. Under any normal circumstances, you won't need to call it.
.PP
\fBParameters:\fP
.RS 4
\fIwhose\fP The canonical form of the user ID to load. You can use \fC\fBusr_exists()\fP\fP to obtain this.
.br
\fIonlrec\fP A pointer to a pre-allocated \fC\fBonlinerec_t\fP\fP to hold the online record.
.RE
.PP
\fBReturns:\fP
.RS 4
Zero if the user could not be loaded, in which case, \fCerrno\fP will be set to the error reported by the system. One if the user was loaded successfully, in which case the account will be in \fConlrec\fP.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBusr_saveonlrec()\fP. 
.RE
.PP

.SS "void usr_postcredits (char * userid, int amount, int paid)"
.PP
Post credits to a user account. This function adds credits to a user's account. The user's shared segment is automatically attached in order to do this. In the process, the current `other' user's shared segment is detached and thus is no longer valid.
.PP
\fBParameters:\fP
.RS 4
\fIuserid\fP Canonical form of the user ID to credit.
.br
\fIamount\fP The amount of credits to add. This may be negative to denote debiting of the account, but I don't recommend it, since this function has all the wrong semantics. Use \fC\fBusr_chargecredits()\fP\fP to debit accounts.
.br
\fIpaid\fP Can be \fCCRD_FREE} to denote free credits, or \fCCRD_PAID\fP for paid credits. Zero is the same as \fCCRD_FREE\fP and any non-zero value is the same as \fCCRD_PAID\fP.\fP
.RE
.PP
\fBSee also:\fP
.RS 4
\fC \fBusr_chargecredits()\fP. \fP
.RE
.PP

.SS "int usr_saveaccount (\fBuseracc_t\fP * uacc)"
.PP
Write a user account to disk. Saves the specified account to disk. This function is called by the system. Under any normal circumstances, you won't need to call it.
.PP
\fBParameters:\fP
.RS 4
\fIuacc\fP A pointer to a \fC\fBuseracc_t\fP\fP holding the account structure.
.RE
.PP
\fBReturns:\fP
.RS 4
Zero if the user could not be saved, in which case, \fCerrno\fP will be set to the error reported by the system. One if the user was written successfully.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBusr_loadaccount()\fP. 
.RE
.PP

.SS "int usr_saveonlrec (\fBonlinerec_t\fP * onlrec)"
.PP
Write a user online record to disk. Saves the specified online record to disk. This function is called by the system. Under any normal circumstances, you won't need to call it.
.PP
\fBParameters:\fP
.RS 4
\fIonlrec\fP Pointer to a \fC\fBonlinerec_t\fP\fP holding the online record to save.
.RE
.PP
\fBReturns:\fP
.RS 4
Zero if the record could not be saved, in which case, \fCerrno\fP will be set to the error reported by the system. One if the record was written successfully.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBusr_loadonlrec()\fP. 
.RE
.PP

.SS "void usr_setclass (char * userid, char * newclass, int permanent)"
.PP
Change a user's class. Move a user to a new class.
.PP
\fBParameters:\fP
.RS 4
\fIuserid\fP The canonical form of the user ID to operate on. You can use \fC\fBusr_exists()\fP\fP to render a user ID in its canonical form.
.br
\fInewclass\fP The name of an existing class to move the user to. Use { \fBcls_find()\fP} to make sure the class exists.
.br
\fIpermanent\fP Set to zero if the change in class is temporary (i.e. only for today). Non-zero values denote a permanent change of class. 
.RE
.PP

.SS "int usr_uidxref (char * userid, int online)"
.PP
User ID completion. Completes A partially specified user ID, offering a menu of similar user IDs if the given ID was ambiguous. This function has two side effects:
.PP
.IP "\(bu" 2
It renders user IDs in their canonical form, and
.PP
.PP
.IP "\(bu" 2
It attaches the final user IDs shared segment \fIif the user is online\fP.
.PP
.PP
Partial user IDs of less than three characters will not even be considered. Most systems have huge numbers of users with the same first couple of letters.
.PP
If the partial user ID is found to be online, it is canonicalised and the function returns immediately. The user's shared segment is also attached.
.PP
Otherwise, the user ID is completed by building a list of all user IDs starting with the supplied user ID. If the list has only one member, the function returns it (and attaches the user's shared segment, if online).
.PP
If more than one user IDs match the partial, provided ID, the user is presented with a menu of the matching user IDs. At this point, the user can either select one of those user IDs by number, or enter an altogether new (possibly partial) user ID and the function will begin all over again. At any rate, if the user selects a user ID, the name is returned and the other user's shared segment is attached, if that user is online. Complicated, eh?
.PP
Oh, by the way, this function ends command concatenation if it is forced to present a menu. This makes sense, because the user wasn't expecting this, and it's probably best to not make any potentially dangerous assumptions about the operation being performed.
.PP
This completion function should be used wherever the system asks for (or expects) a user ID. The \fC\fBget_userid()\fP\fP high-level input function uses it. Even normally non-interactive parts of the system use it, like the {\fIpage}\fP global command (\fC/p\fP). I thoroughly recommend duplicating this behaviour for any other strings that can be numerous, long and/or complicated.
.PP
\fBParameters:\fP
.RS 4
\fIuserid\fP A partially specified user ID. After successful completion of this function, the canonical form of the full user ID will overwrite this argument.
.br
\fIonline\fP If non-zero, the function will only consider users currently on-line for completion, ignoring all other users.
.RE
.PP
\fBReturns:\fP
.RS 4
Zero if the user pressed \fCX\fP at the user ID selection menu. If this occurs, you should cancel whatever operation is in progress. If all went well and a user ID was located, a value of one is returned. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "\fBclassrec_t\fP* \fBcls_classes\fP"
.PP
Array of all defined user classes. Definition at line 1237 of file useracc.h.
.SS "int \fBcls_count\fP"
.PP
Number of classes in \fCcls_classes\fP. Definition at line 1238 of file useracc.h.
