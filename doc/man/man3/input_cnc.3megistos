.TH "Command Concatenation (Mid-to-High-Level)" 3 "18 May 2004" "Megistos API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Command Concatenation (Mid-to-High-Level) \- Processing multiple commands typed together.  

.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBcnc_begin\fP ()"
.br
.RI "\fIBegin concatenation handling. \fP"
.ti -1c
.RI "int \fBcnc_end\fP ()"
.br
.RI "\fIEnd concatenation processing. \fP"
.ti -1c
.RI "char \fBcnc_chr\fP ()"
.br
.RI "\fIRead a concatenated character. \fP"
.ti -1c
.RI "\fBint32\fP \fBcnc_int\fP ()"
.br
.RI "\fIRead a concatenated 32-bit integer. \fP"
.ti -1c
.RI "\fBint64\fP \fBcnc_long\fP ()"
.br
.RI "\fIRead a concatenated 64-bit integer. \fP"
.ti -1c
.RI "char \fBcnc_yesno\fP ()"
.br
.RI "\fIRead a concatenated `Y' or `N'. \fP"
.ti -1c
.RI "char * \fBcnc_word\fP ()"
.br
.RI "\fIRead a space-delimited word. \fP"
.ti -1c
.RI "char * \fBcnc_all\fP ()"
.br
.RI "\fIReturn all remaining concatenated commands. \fP"
.ti -1c
.RI "char \fBcnc_more\fP ()"
.br
.RI "\fICheck remaining input. \fP"
.ti -1c
.RI "\fBuint64\fP \fBcnc_hex\fP ()"
.br
.RI "\fIRead a concatenated hexadecimal 64-bit integer. \fP"
.ti -1c
.RI "char * \fBcnc_num\fP ()"
.br
.RI "\fIRead an arbitrary precision integer. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "char * \fBcnc_nxtcmd\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Processing multiple commands typed together. I don't know if this was supported anywhere else before the Major BBS, but that's where I first saw it. The concept is nice: expert users can concatenate multiple commands, instead of typing them one by one and getting menu after menu sent to them. This makes a lot of sense for both advanced users and those on a slow line.
.PP
This group of functions helps handle such commands. Commands processing \fImust\fP use these function as much as possible. There are many guidelines on how to use them, but most are empirical. A few I can remember right now are:
.PP
.IP "\(bu" 2
Call \fBcnc_end()\fP before asking for confirmation on something dangerous, like deleting important information.
.PP
.PP
.IP "\(bu" 2
Call \fBcnc_end()\fP after errors, to stop the rest of the user's command from being executed.
.PP
.PP
.IP "\(bu" 2
Use \fBcnc_more()\fP to see if more input is available, or rely on what the other functions return.
.PP
.PP
.IP "\(bu" 2
Try to use the \fCget_\fP high-level input functions wherever possible. They deal with concatenation in the canonical way and save you almsot all of the work.
.PP
.PP
.IP "\(bu" 2
For that matter, to learn more about how to work with concatenation, refer to the code of those functions.
.PP
.PP
The \fCcnc_\fP functions will provide you with information from the user's input in an incremental way. You should only ask for what you need. If you only need a single menu option, don't call \fBcnc_word()\fP. Doing so will gobble any other commands the user has stuck after the one you need.
.PP
Before calling one of the main \fCcnc_\fP functions, make sure there \fIinput\fP for you. The \fBcnc_more()\fP function should be handy. If there's no more input, you should call \fBinp_get()\fP to obtain some. Yes, this is tedious stuff. That's why it's recommended you use the \fCget_\fP functions.
.PP
\fBSee also:\fP
.RS 4
\fBcnc_nxtcmd\fP, \fBcnc_begin()\fP, \fBcnc_end()\fP, \fBcnc_chr()\fP, chr_int(), \fBcnc_word()\fP, \fBcnc_long()\fP, \fBcnc_yesno()\fP, \fBcnc_hex()\fP, \fBcnc_word()\fP, \fBcnc_all()\fP, \fBcnc_more()\fP, \fBcnc_num()\fP, \fBinp_raw()\fP. 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "char* cnc_all ()"
.PP
Return all remaining concatenated commands. Gobbles and returns all remaining input.
.PP
\fBReturns:\fP
.RS 4
the value of \fBcnc_nxtcmd\fP, or \fCNULL\fP if there was no remaining input. 
.RE
.PP

.SS "void cnc_begin ()"
.PP
Begin concatenation handling. Parses command line and prepares to handle concatenation. If you want to handle concatenation, make sure you call this after getting input, but do \fINOT\fP call it at any other time. It will reset \fBcnc_nxtcmd\fP to the beginning of the line and may get you into endless loops (which, my sources tell me, Linux executes in a measly five seconds anyway).
.PP
Oh, and other modules may rely on this. The whole concept of concatenation joins modules together to form what appears to be a single system. If you break the chain, other modules will be unhappy. A bug in Menuman 0.1 broke the chain in 1994. Three minutes after that, a \fCgdb\fP fell on it, killing it. The clubs module has followed the chain from the beginning and look at it: it's the biggest one of'em all.
.PP
Oh. Sorry. 
.SS "char cnc_chr ()"
.PP
Read a concatenated character. Takes a single character from the input string.
.PP
\fBReturns:\fP
.RS 4
The character read from the concatenated commands. Zero (\fC\\0\fP) is returned if no more commands are available. 
.RE
.PP

.SS "int cnc_end ()"
.PP
End concatenation processing. This stops processing concatenated input. It re-parses the input line into space-delimited arguments and invalidates ::inp_nxtcmd.
.PP
\fBReturns:\fP
.RS 4
non-zero if the input line was empty. Zero otherwise. 
.RE
.PP

.SS "\fBuint64\fP cnc_hex ()"
.PP
Read a concatenated hexadecimal 64-bit integer. Parses a concatenated hexadecimal integer and returns it as a 64-bit unsigned integer (because we can). Consecutive hex integers must, of course, be space-delimited. The function knows about this (it uses \fCsscanf()\fP to the dirty work).
.PP
\fBReturns:\fP
.RS 4
The integer read from the concatenated commands. Zero (\fC\\0\fP) is returned if there was a parse error. This is a \fIbug\fP, and should be rectified. 
.RE
.PP

.SS "\fBint32\fP cnc_int ()"
.PP
Read a concatenated 32-bit integer. Parses a concatenated 32-bit signed integer. Consecutive integers are, of course, space-delimited. The function knows about this \fCsscanf()\fP to the dirty work).
.PP
\fBReturns:\fP
.RS 4
The integer read from the concatenated commands. Zero (\fC\\0\fP) is returned if there was a parse error. This is a \fIbug\fP, and should be rectified. 
.RE
.PP

.SS "\fBint64\fP cnc_long ()"
.PP
Read a concatenated 64-bit integer. Parses a concatenated 64-bit signed integer. Consecutive integers are, of course, space-delimited. The function knows about this \fCsscanf()\fP to the dirty work).
.PP
The nomenclature was inspired from the Major BBS, which was 16-bit. There, \fCint\fPs were 16 bits long (eurgh) and \fClong\fPs were a nice 32 bits. We go a bit further and read 64-bit `longs'.
.PP
\fBReturns:\fP
.RS 4
The integer read from the concatenated commands. Zero (\fC\\0\fP) is returned if there was a parse error. This is a \fIbug\fP, and should be rectified. 
.RE
.PP

.SS "char cnc_more ()"
.PP
Check remaining input. Checks if there is any concatenated input remaining.
.PP
\fBReturns:\fP
.RS 4
the first character of the remaining input. The character is not gobbled, so you have to call \fBcnc_chr()\fP if you want it removed from the command string. This makes \fBcnc_more()\fP perfect for peeking at the next character. 
.RE
.PP

.SS "char* cnc_num ()"
.PP
Read an arbitrary precision integer. Parses a concatenated integer of arbitrary length and precision and returns it as a \fCchar\fP string. The function stops parsing at the first non-digit character that follows an optional minus sign.
.PP
\fBReturns:\fP
.RS 4
The integer read from the concatenated commands as a string. \fCNULL\fP is returned if there was no input to play with. Absolutely no validation is performed (apart from making sure the minus sign is at the beginning). 
.RE
.PP

.SS "char* cnc_word ()"
.PP
Read a space-delimited word. Parses a space-delimited word.
.PP
\fBReturns:\fP
.RS 4
a pointer to the word. The pointed entity is statically allocated. Don't \fCfree()\fP the pointer! \fCNULL\fP is returned if no more input is available. 
.RE
.PP

.SS "char cnc_yesno ()"
.PP
Read a concatenated `Y' or `N'. Parses a simple yes/no answer.
.PP
\fBReturns:\fP
.RS 4
the parsed character, in upper case (if it's a `y' or `n'). Zero is returned if no more input is available, as per \fBcnc_chr()\fP, which this function calls. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "char* \fBcnc_nxtcmd\fP"
.PP
Definition at line 586 of file input.h.
