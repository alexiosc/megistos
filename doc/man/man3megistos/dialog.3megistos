.TH "Dialog Boxes (Visual And Textual)" 3megistos "15 Jul 2004" "Megistos API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Dialog Boxes (Visual And Textual) \- Dialogue boxes are an interactive, modal means of gathering data from a user.  

.PP
Dialogue boxes, be they full-screen or the more conventional, menu-driven variety, have a few advantages over serialised question-answer data entry: they are a more direct data entry experience for the user; they offer random access; higher visibility (the user always knows how much data there is to fill in); and much higher user friendliness.
.PP
Very few BBS systems offer such a means. The design of this dialog subsystem was very loosely based on the dialogs of Major BBS version 6, with more inspiration coming from the (then newfangled) forms on the World Wide Web.
.PP
Implementing a Dialogue box involves a set of steps:
.PP
.IP "\(bu" 2
Decide what information needs to be entered. Try to minimise the information. Screen estate is precious at an expected 80x25 text mode. The more complexity on the dialogue, the less usable it is.
.PP
.PP
.IP "\(bu" 2
Lay out the visual template. Try to follow the existing examples. It'll keep the style consistent.
.PP
.PP
.IP "\(bu" 2
Lay out the non-visual template and its individual prompts. Make sure the prompts can also work as help tips for the visual version, because they'll also be used in this way.
.PP
.PP
To use a form, these steps must be followed:
.PP
.IP "\(bu" 2
Create the default data file.
.PP
.PP
.IP "\(bu" 2
Call the data-entry subsystem.
.PP
.PP
.IP "\(bu" 2
Read back data file. Check the result code embedded in the file, and act accordingly. Canceling implies no changes should be kept.
.PP
.PP
The following documentation will hopefully give enough information to help you get started.
.SH "Template directives."
.PP
Template directives are special escape sequences resembling terminal directives. They are, of course, not handled by any terminal in existence. Within the BBS, they are interpreted \fIonly\fP where data entry templates are specified, i.e. only the \fBdialog_run()\fP function.
.PP
Although the same directives work on both visual dialogue boxes and conventional menu-driven data entry, they perform differently in either case. The following list will describe each behaviour.
.PP
All directives start with the sequence `\fCESC @\fP', or ASCII codes \fC27 64\fP (in decimal). Directives need one or more arguments, depending on their type. Arguments may be of two types:
.PP
.IP "\(bu" 2
int Denotes an integer argument.
.PP
.PP
.IP "\(bu" 2
str Denotes a string argument, enclosed in double quotes.
.PP
.PP
All arguments are separated by semicolons. The directive is terminated by a single character which identifies the type of directive. The following types of directives are currently available, listed here with their expected argument types (spaces aren't included for clarity, and are not to be used in the directives):
.PP
.PD 0
.IP "\(bu" 2
ESC @ int ; int ; int s. Specifies a { string input field. The first argument is the maximum allowed length of the string. The second argument is the maximum length of the screen that will be {\fIvisible}\fP, that is the physical length of the input field. The third argument represents a set of flags (ORred together), as follows:
.PP
.IP "  \(bu" 4
0 Normal operation.
.IP "  \(bu" 4
1 Characters are converted to upper case.
.IP "  \(bu" 4
2 Password: asterisks are echoed.
.IP "  \(bu" 4
4 Date input: formatted as a DD/MM/YY-style date.
.PP
.PP
In full-screen mode, this directive inserts an input field at the current position of the cursor, and the current character attributes (colour et cetera). The length is that of the second argument plus 2 (the field is space-padded on either side). Once the field is active, it interprets editing commands such as the arrow keys, backspace, delete, et cetera. Characters are inserted properly, and, if the string is longer than its visible part, the field scrolls to accommodate it. If the string extends past the left edge of the field, a less-than sign (\fC<\fP) is displayed at the left padding space. Likewise, the right padding space will display a greater-than (\fC>\fP) if the string extends past the right edge of the field.
.PP
In menu-driven mode, this directive simply prints the string, date, or whatever. The string is padded to the length specified by the second argument, but is not space-padded (little use for the scrolling arrows here). If the string is longer than the length of the field, the beginning of the string is displayed. An ellipsis (\fC...\fP) is displayed at the rightmost three characters of the field to denote that the entire string could not fit on-screen.
.PP
Here are a few examples:
.PP
.IP "  \(bu" 4
\fCESC@80;40;s\fP specifies a string field holding up to 80 characters, of which up to 40 will be visible. The field occupies 42 characters in visual mode, and 40 in text mode.
.PP
.PP
.IP "  \(bu" 4
\fCESC@40;40;1s\fP A non-scrolling, string field that automatically converts characters to upper case.
.PP
.PP
.IP "  \(bu" 4
\fCESC@8;8;2s\fP A non-scrolling, password entry field. Any characters typed will echo as asterisks.
.PP
.PP

.IP "\(bu" 2
\fCESC @ int ; int ; int ; int n\fP. Specifies a number input field. The first argument is the maximum allowed \fIlength\fP of the number. The second and arguments hold the minimum and maximum values the number is allowed to have. Invalid values cause the number to be changed to the nearest valid number. The fourth argument is, as usual, a set of flags (ORred together), as follows:
.PP
.IP "  \(bu" 4
0 Normal number.
.PP
.PP
.IP "  \(bu" 4
1 Right-flush number when displaying. The default is to left-flush it.
.PP
.PP
In full-screen mode, this directive works just like a string field (see the above documentation for details), but it automatically validates its input. Only digits may be typed inside a field (other characters are ignored). Leaving the field with a number off-limits will cause the number to change to the nearest valid integer.
.PP
In menu-driven mode, this directive behaves exactly like a string field. The number limits are imposed when entering the number. The user will keep getting the question (along with the valid range of numbers) until they respect the limits.
.PP

.IP "\(bu" 2
\fCESC @ int ; str l\fP. Specifies a list of values, a multiple choice selection. The first argument defines the visible length of this field. The second argument is a string containing the possible choices. The string is enclosed in double quotes and choices are delimited with pipes (\fC|\fP).
.PP
In full-screen mode, this directive uses the specified space to print as many of one of the choices as will fit. The arrow keys, the space bar and other keys change the active option.
.PP
In menu-driven mode, the user is presented with a submenu of the choices specified in the second argument.
.PP
Here are a few examples:
.PP
.IP "  \(bu" 4
\fCESC@5;'Yes|No|Maybe'l\fP denotes a multiple-choice list providing three obvious options. All options are padded to 5 characters, except `Maybe', which is already 5 characters long.
.PP
.PP
.IP "  \(bu" 4
\fCESC@5;'Yessirree|Nope, thank you|Maybe'l\fP chops off excess characters, transforming the visible choices to `Yessi', `Nope,', and leaving `Maybe' as it is.
.PP
.PP

.IP "\(bu" 2
\fCESC @ str t\fP. Specifies a toggle field, holding a boolean value. The first and only argument is a two-character string (any less cause undefined behaviour, any more are ignored), denoting the two characters used to display the off/on states of the toggle (or yes/no, or true/false, or whatever else you use it for). The first character is the off/no/false state, the second is on/yes/true.
.PP
In full-screen mode, this directive uses a single character to display the state of the toggle field. Space or the arrow keys toggle the value.
.PP
In menu-driven mode, the system prints the corresponding character where the field is specified.
.PP
Here's a simple example:
.PP
.IP "  \(bu" 4
\fC[ESC@' X't]\fP Specifies a toggle drawn inside a pair of brackets. The toggle displays a space for the off state, rendering into \fC[ ]}. The on state is { [X]\fP. This is the style I personally prefer, because it looks a bit like Borland's Turbovision (which I was programming on before I got into Megistos --- there are definite influences in the default visual design of the dialog boxes).
.PP
.PP

.IP "\(bu" 2
\fCESC @ int ; str b\fP Specifies a button. Buttons terminate the data entry session. All dialog boxes have at least two implicit buttons, whether you define them (and thus make them visible) or not: OK and Cancel. These are associated with hot-keys in full-screen mode, and with the \fCOK} and { X\fP commands in menu-driven mode. The first argument of the directive specifies the width of the button in characters. The second is the button label.
.PP
In full-screen mode, labels are centred within the available space. Focusing or `going into' the button draws greater-than and less-than signs as arrows to point to the label. The makeshift arrows are drawn at the edges of the button's area, so always specify at least two characters more than the width of the label.
.PP
In menu-driven mode, there is \fIno visual component\fP for this control. However, the user may select it by number, exiting the current dialogue. In addition, \fCOK\fP selects the OK button and the omnipresent \fCX\fP is equivalent to selcting the cancel button. The user will be asked if they want to cancel the dialog at that point.
.PP
Here's a simple example:
.PP
.IP "  \(bu" 4
\fCESC@8;'OK'b\fP Specifies an `OK' button, centred in an 8-character space. Focusing will put makeshift arrows in the first and eighth position, effectively decreasing the padding.
.PP
.PP

.PP
.SH "Template style guide."
.PP
Here are a few arbitrary guidelines for full-screen dialogue templates. These are the ones I like to use. This being a BBS, though, these are only guidelines and not rules!
.PP
.IP "\(bu" 2
Use different colours for different types of fields. I played it safe and used the Turbovision scheme: white-on-blue for fields where you key in values and black-on-cyan for fields where you just have to press a key to make a change (i.e. lists and toggles).
.PP
.PP
.IP "\(bu" 2
Place brief instructions to the right of each field that doesn't behave in any obvious manner. I like to give the valid range of each number field, and a string like `Space to change' next to lists and toggles.
.PP
.PP
.IP "\(bu" 2
My buttons are like Turbovision-on-dope. They're `shaded' buttons, with red background for cancel-type buttons and green for everything else.
.PP
.PP
.IP "\(bu" 2
Lists and toggles don't use any padding. If you use different backgrounds for these controls, they'll look strange compared to the others. I like to put two spaces on either end of lists. These are in the same colour as the list and work as backgrounds. For toggles, I use a space on either side \fIand\fP brackets, all in the same colour attributes as the field itself: black on cyan. It makes things look much better.
.PP
.PP
.IP "\(bu" 2
Don't clutter things! Unless necessary, use every second line of the screen for fields. Otherwise, fields touch each other, looking ugly.
.PP
.PP
.IP "\(bu" 2
If space permits, have a brief legend at the bottom of the dialogue box. You can list any of the key bindings for Help (Ctrl-R), field-help (Ctrl-O), Redraw (Ctrl-L), OK (Ctrl-S) or Cancel (Ctrl-C). The first two should probably always be there.
.PP
.PP
.IP "\(bu" 2
Don't change the location or ordering of buttons in a dialog! You should try to keep the user interface consistent. Of course, if you move buttons around, things will break because your dialogue parser code will be looking for buttons and fields in the wrong sequence.
.PP
.SH "Preparing to use a dialogue."
.PP
Using dialogue boxes is, unfortunately, the most complicated part of writing a module. It's annoying in the beginning, but, after your first dialogue is done, you'll be able to scavenge code and re-use it at will. I've been doing the same!
.PP
So, let's dive straight into it with some code to prepare and issue a dialogue box. We'll be issuing a dialogue with the following controls:
.PP
.IP "\(bu" 2
An 80 character string field.
.IP "\(bu" 2
A 30 character password field.
.IP "\(bu" 2
A list selection field allowing `Yes', `No' and `Maybe' (5 characters maximum).
.IP "\(bu" 2
A toggle control (3 characters, because these controls report `on' or `off' depending on their state.
.IP "\(bu" 2
A button labeled `OK'.
.IP "\(bu" 2
Another button, `Cancel'.
.PP
.PP
The code for this example is in mod_dialog.c:
.PP
The code demonstrates quite a few things:
.PP
.PD 0
.IP "\(bu" 2
Allocating space for the data. Here, we need space for: one 80-character field, one 30-character field, a list whose longest value is 5 characters long, and a toggle with 3 characters (`off' is the longest value). Add space needed for line feeds and we have \fC81+31+6+4\fP bytes. Add the 'OK' button (3 bytes, including line feed) and the 'Cancel' button (7 bytes, including line feed). Add enough space for the name of the longest button (7 bytes), which will be added by the data entry subsystem to tell you what button ended the session, and don't forget one byte for null termination. The grand total is \fC81+31+6+4+3+7+7+1=140\fP.
.PP
\fIAlternatively\fP, you could say the hell with it, figure out the system already has buffers much larger than this, and use them. I whole-heartedly recommend using \fBinp_buffer\fP from the input subsystem because you can re-use existing BBS functionality to parse the results. It's all right to clobber \fBinp_buffer\fP, assuming you've already parsed all of the user's last input line, which is almost certain. In fact, you shouldn't allow concatenated commands past a data entry session anyway.
.PP

.IP "\(bu" 2
Specifying the default values. The \fCsprintf()\fP command takes care of that for us (if you're paranoid about overflows, you're welcome to use \fCsnprintf()\fP instead). We put the value of each control on a line of its own, terminating lines with \fC'
.br
'\fP. Here's how to do it for all available types of controls:
.PP
.IP "  \(bu" 4
String and numerical fields. Just write the default value you need. Make sure the value is within the specifications (e.g. length, min-max ranges for numbers) of the fields! There's no need to enclose strings in double quotes.
.PP
.PP
.IP "  \(bu" 4
Lists. Write the string of one of the settings. In our yes/no/maybe example, we write \fC'Yes'\fP. Note that we observe case. The string should be a perfect match with \fCstrcmp()\fP.
.PP
.PP
.IP "  \(bu" 4
Toggles. Specify \fCon} or { off\fP to denote the obvious things. User lower case.
.PP
.PP
.IP "  \(bu" 4
Buttons. Anything you write will be ignored, but do write something as a placeholder. The data entry subsystem will replace these placeholders with the actual labels of the respective buttons on exit.
.PP
.PP

.IP "\(bu" 2
Executing the data entry subsystem. The call to the data entry subsystem is nothing too complicated (and it's all explained in this part of the documentation). You need to give it the name of a message block, two prompts containing the dialogue templates for visual and menu-based (`linear') data entry, and the newly constructed string of default values. Don't forget to check the return value in case an error precluded the dialogue from running. In such a case, abort the current process and go back to the module's previous (or main) menu. No need to register a fatal error for this.
.PP

.PP
.SH "Dialogue aftermath."
.PP
This is what happens after you call \fBdialog_run()\fP. Again, the full code can be found in example mod_dialog.c.
.PP
This is where using \fBinp_buffer\fP shows its advantages: you can parse the entire result string with a single call to \fBdialog_parse()\fP, which is virtually the same function we use to parse a user's input. I like re-using code!
.PP
The rest should be pretty obvious. The last datum returned by \fBdialog_run()\fP is the \fIlabel\fP of one of three things:
.PP
.IP "\(bu" 2
The label of the button that ended the dialogue. This may change, depending on sysop customisation and internationalisation.
.PP
.PP
.IP "\(bu" 2
The string \fC'OK'\fP, if the user pressed the `save' shortcut, which is synonymous to `pressing' the OK button. You should always have an OK button, but even if you don't, this shortcut will still work in this way.
.PP
.PP
.IP "\(bu" 2
The string \fC'Cancel'\fP, if the user pressed the `cancel' shortcut.
.PP
.PP
Since our example dialogue only has two buttons, OK and Cancel, we check for the `OK' shortcut and an actual button `press'. The latter is done by comparing the label of the OK button (whatever it is) against the label of the button that ended the dialogue.
.PP
@{ 
